
Co_len_nao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004710  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800481c  0800481c  0001481c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048c0  080048c0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080048c0  080048c0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048c0  080048c0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048c0  080048c0  000148c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048c4  080048c4  000148c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080048c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000018  080048e0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  080048e0  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e410  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002492  00000000  00000000  0002e494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001038  00000000  00000000  00030928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000caa  00000000  00000000  00031960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000186be  00000000  00000000  0003260a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000131c9  00000000  00000000  0004acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cc56  00000000  00000000  0005de91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000444c  00000000  00000000  000eaae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000eef34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08004804 	.word	0x08004804

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08004804 	.word	0x08004804

0800014c <Flash_Write_Uint>:
     - The function writes an integer variable to the flash memory
     - _DATA_         : an integer variable
     -_ADDRESS_DATA_  : page address 
*/
void  Flash_Write_Uint(uint16_t _DATA_, uint32_t _ADDRESS_DATA_)
{   
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	80fb      	strh	r3, [r7, #6]
	  /*
     	 CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
	     HAL_TickFreqTypeDef tick_freq =   uwTickFreq;
	    uint32_t tick_var = uwTick;
	   */
	      HAL_FLASH_Unlock();
 8000158:	f001 fff6 	bl	8002148 <HAL_FLASH_Unlock>
	      Flash_Erase(_ADDRESS_DATA_);
 800015c:	6838      	ldr	r0, [r7, #0]
 800015e:	f000 f909 	bl	8000374 <Flash_Erase>
	      SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000162:	4b18      	ldr	r3, [pc, #96]	; (80001c4 <Flash_Write_Uint+0x78>)
 8000164:	691b      	ldr	r3, [r3, #16]
 8000166:	4a17      	ldr	r2, [pc, #92]	; (80001c4 <Flash_Write_Uint+0x78>)
 8000168:	f043 0301 	orr.w	r3, r3, #1
 800016c:	6113      	str	r3, [r2, #16]
          while((FLASH->SR&FLASH_SR_BSY)){};
 800016e:	bf00      	nop
 8000170:	4b14      	ldr	r3, [pc, #80]	; (80001c4 <Flash_Write_Uint+0x78>)
 8000172:	68db      	ldr	r3, [r3, #12]
 8000174:	f003 0301 	and.w	r3, r3, #1
 8000178:	2b00      	cmp	r3, #0
 800017a:	d1f9      	bne.n	8000170 <Flash_Write_Uint+0x24>
          *(__IO uint16_t*)(_ADDRESS_DATA_) = (uint16_t)(_DATA_ & 0xFFFF) ;
 800017c:	683b      	ldr	r3, [r7, #0]
 800017e:	88fa      	ldrh	r2, [r7, #6]
 8000180:	801a      	strh	r2, [r3, #0]
						while((FLASH->SR&FLASH_SR_BSY)){};
 8000182:	bf00      	nop
 8000184:	4b0f      	ldr	r3, [pc, #60]	; (80001c4 <Flash_Write_Uint+0x78>)
 8000186:	68db      	ldr	r3, [r3, #12]
 8000188:	f003 0301 	and.w	r3, r3, #1
 800018c:	2b00      	cmp	r3, #0
 800018e:	d1f9      	bne.n	8000184 <Flash_Write_Uint+0x38>
          *(__IO uint16_t*)(_ADDRESS_DATA_ + 2U) = (uint16_t)((_DATA_ >> 16U) & 0xFFFF);
 8000190:	88fb      	ldrh	r3, [r7, #6]
 8000192:	141a      	asrs	r2, r3, #16
 8000194:	683b      	ldr	r3, [r7, #0]
 8000196:	3302      	adds	r3, #2
 8000198:	b292      	uxth	r2, r2
 800019a:	801a      	strh	r2, [r3, #0]
			
	while((FLASH->SR&FLASH_SR_BSY)){};
 800019c:	bf00      	nop
 800019e:	4b09      	ldr	r3, [pc, #36]	; (80001c4 <Flash_Write_Uint+0x78>)
 80001a0:	68db      	ldr	r3, [r3, #12]
 80001a2:	f003 0301 	and.w	r3, r3, #1
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d1f9      	bne.n	800019e <Flash_Write_Uint+0x52>
		     CLEAR_BIT(FLASH->CR , FLASH_CR_PG);
 80001aa:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <Flash_Write_Uint+0x78>)
 80001ac:	691b      	ldr	r3, [r3, #16]
 80001ae:	4a05      	ldr	r2, [pc, #20]	; (80001c4 <Flash_Write_Uint+0x78>)
 80001b0:	f023 0301 	bic.w	r3, r3, #1
 80001b4:	6113      	str	r3, [r2, #16]
         HAL_FLASH_Lock();
 80001b6:	f001 ffed 	bl	8002194 <HAL_FLASH_Lock>
	    uwTickFreq = tick_freq;
     	uwTick     = tick_var;
    	SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
		*/
		
}
 80001ba:	bf00      	nop
 80001bc:	3708      	adds	r7, #8
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40022000 	.word	0x40022000

080001c8 <Flash_Write_String>:
     - _Array_DATA_         : String / 8 bit array address
     -_ADDRESS_DATA_        : page address 
     -_LENGTH_              : length of array
*/
void  Flash_Write_String(uint8_t* _Array_DATA_, uint32_t _ADDRESS_DATA_, uint16_t _LENGTH_)
{   
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	4613      	mov	r3, r2
 80001d4:	80fb      	strh	r3, [r7, #6]
	  /*
     	 CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
	     HAL_TickFreqTypeDef tick_freq =   uwTickFreq;
	    uint32_t tick_var = uwTick;
	   */
	      HAL_FLASH_Unlock();
 80001d6:	f001 ffb7 	bl	8002148 <HAL_FLASH_Unlock>
	      Flash_Erase(_ADDRESS_DATA_);
 80001da:	68b8      	ldr	r0, [r7, #8]
 80001dc:	f000 f8ca 	bl	8000374 <Flash_Erase>
	      SET_BIT(FLASH->CR, FLASH_CR_PG);
 80001e0:	4b19      	ldr	r3, [pc, #100]	; (8000248 <Flash_Write_String+0x80>)
 80001e2:	691b      	ldr	r3, [r3, #16]
 80001e4:	4a18      	ldr	r2, [pc, #96]	; (8000248 <Flash_Write_String+0x80>)
 80001e6:	f043 0301 	orr.w	r3, r3, #1
 80001ea:	6113      	str	r3, [r2, #16]

			for(uint16_t i=0; i < _LENGTH_; i++)
 80001ec:	2300      	movs	r3, #0
 80001ee:	82fb      	strh	r3, [r7, #22]
 80001f0:	e013      	b.n	800021a <Flash_Write_String+0x52>
			{  
          while((FLASH->SR&FLASH_SR_BSY)){};
 80001f2:	bf00      	nop
 80001f4:	4b14      	ldr	r3, [pc, #80]	; (8000248 <Flash_Write_String+0x80>)
 80001f6:	68db      	ldr	r3, [r3, #12]
 80001f8:	f003 0301 	and.w	r3, r3, #1
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d1f9      	bne.n	80001f4 <Flash_Write_String+0x2c>
          *(__IO uint16_t*)(_ADDRESS_DATA_ + i*2U) = _Array_DATA_[i];
 8000200:	8afb      	ldrh	r3, [r7, #22]
 8000202:	68fa      	ldr	r2, [r7, #12]
 8000204:	4413      	add	r3, r2
 8000206:	7819      	ldrb	r1, [r3, #0]
 8000208:	8afb      	ldrh	r3, [r7, #22]
 800020a:	005a      	lsls	r2, r3, #1
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	4413      	add	r3, r2
 8000210:	b28a      	uxth	r2, r1
 8000212:	801a      	strh	r2, [r3, #0]
			for(uint16_t i=0; i < _LENGTH_; i++)
 8000214:	8afb      	ldrh	r3, [r7, #22]
 8000216:	3301      	adds	r3, #1
 8000218:	82fb      	strh	r3, [r7, #22]
 800021a:	8afa      	ldrh	r2, [r7, #22]
 800021c:	88fb      	ldrh	r3, [r7, #6]
 800021e:	429a      	cmp	r2, r3
 8000220:	d3e7      	bcc.n	80001f2 <Flash_Write_String+0x2a>
			}
	while((FLASH->SR&FLASH_SR_BSY)){};
 8000222:	bf00      	nop
 8000224:	4b08      	ldr	r3, [pc, #32]	; (8000248 <Flash_Write_String+0x80>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	f003 0301 	and.w	r3, r3, #1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d1f9      	bne.n	8000224 <Flash_Write_String+0x5c>
		     CLEAR_BIT(FLASH->CR , FLASH_CR_PG);
 8000230:	4b05      	ldr	r3, [pc, #20]	; (8000248 <Flash_Write_String+0x80>)
 8000232:	691b      	ldr	r3, [r3, #16]
 8000234:	4a04      	ldr	r2, [pc, #16]	; (8000248 <Flash_Write_String+0x80>)
 8000236:	f023 0301 	bic.w	r3, r3, #1
 800023a:	6113      	str	r3, [r2, #16]
         HAL_FLASH_Lock();
 800023c:	f001 ffaa 	bl	8002194 <HAL_FLASH_Lock>
	    uwTickFreq = tick_freq;
     	uwTick     = tick_var;
    	SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
		*/
		
}
 8000240:	bf00      	nop
 8000242:	3718      	adds	r7, #24
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	40022000 	.word	0x40022000

0800024c <Flash_Read_Uint>:
     - The function reads an integer variable from the flash memory
     - _DATA_         : an integer variable
     -_ADDRESS_DATA_  : page address 
*/
uint32_t Flash_Read_Uint(uint32_t _ADDRESS_DATA_)
{ 
 800024c:	b480      	push	{r7}
 800024e:	b087      	sub	sp, #28
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
	//___disable_systick___
     	 CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000254:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <Flash_Read_Uint+0x58>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a12      	ldr	r2, [pc, #72]	; (80002a4 <Flash_Read_Uint+0x58>)
 800025a:	f023 0302 	bic.w	r3, r3, #2
 800025e:	6013      	str	r3, [r2, #0]
	     HAL_TickFreqTypeDef tick_freq =   uwTickFreq;
 8000260:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <Flash_Read_Uint+0x5c>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	75fb      	strb	r3, [r7, #23]
	     uint32_t tick_var = uwTick;
 8000266:	4b11      	ldr	r3, [pc, #68]	; (80002ac <Flash_Read_Uint+0x60>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	613b      	str	r3, [r7, #16]
	
	uint32_t val = (*(uint16_t*)(_ADDRESS_DATA_)) | ((*(uint16_t*)(_ADDRESS_DATA_ + 2U))<<16U);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	881b      	ldrh	r3, [r3, #0]
 8000270:	461a      	mov	r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	3302      	adds	r3, #2
 8000276:	881b      	ldrh	r3, [r3, #0]
 8000278:	041b      	lsls	r3, r3, #16
 800027a:	4313      	orrs	r3, r2
 800027c:	60fb      	str	r3, [r7, #12]
	
	//___enable_systick___
	    uwTickFreq = tick_freq;
 800027e:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <Flash_Read_Uint+0x5c>)
 8000280:	7dfb      	ldrb	r3, [r7, #23]
 8000282:	7013      	strb	r3, [r2, #0]
     	uwTick     = tick_var;
 8000284:	4a09      	ldr	r2, [pc, #36]	; (80002ac <Flash_Read_Uint+0x60>)
 8000286:	693b      	ldr	r3, [r7, #16]
 8000288:	6013      	str	r3, [r2, #0]
    	SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <Flash_Read_Uint+0x58>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a05      	ldr	r2, [pc, #20]	; (80002a4 <Flash_Read_Uint+0x58>)
 8000290:	f043 0302 	orr.w	r3, r3, #2
 8000294:	6013      	str	r3, [r2, #0]
	
	return val;
 8000296:	68fb      	ldr	r3, [r7, #12]
}
 8000298:	4618      	mov	r0, r3
 800029a:	371c      	adds	r7, #28
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000e010 	.word	0xe000e010
 80002a8:	20000014 	.word	0x20000014
 80002ac:	200001a4 	.word	0x200001a4

080002b0 <Flash_Read_String>:
     - _Array_DATA_         : String / 8 bit array address
     -_ADDRESS_DATA_        : page address 
     -_LENGTH_              : length of array
*/
void Flash_Read_String(uint8_t* _Array_DATA_, uint32_t _ADDRESS_DATA_, uint16_t _LENGTH_)
{     //___disable_systick___
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	4613      	mov	r3, r2
 80002bc:	80fb      	strh	r3, [r7, #6]
     	 CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80002be:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <Flash_Read_String+0x80>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a1b      	ldr	r2, [pc, #108]	; (8000330 <Flash_Read_String+0x80>)
 80002c4:	f023 0302 	bic.w	r3, r3, #2
 80002c8:	6013      	str	r3, [r2, #0]
	     HAL_TickFreqTypeDef tick_freq =   uwTickFreq;
 80002ca:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <Flash_Read_String+0x84>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	757b      	strb	r3, [r7, #21]
	     uint32_t tick_var = uwTick;
 80002d0:	4b19      	ldr	r3, [pc, #100]	; (8000338 <Flash_Read_String+0x88>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	613b      	str	r3, [r7, #16]
	
	 //_write_flash
	   HAL_FLASH_Unlock();
 80002d6:	f001 ff37 	bl	8002148 <HAL_FLASH_Unlock>
     	deleteBuffer8(_Array_DATA_,_LENGTH_);
 80002da:	88fb      	ldrh	r3, [r7, #6]
 80002dc:	4619      	mov	r1, r3
 80002de:	68f8      	ldr	r0, [r7, #12]
 80002e0:	f000 f82c 	bl	800033c <deleteBuffer8>
				 for(uint16_t i = 0; i < _LENGTH_; i++)
 80002e4:	2300      	movs	r3, #0
 80002e6:	82fb      	strh	r3, [r7, #22]
 80002e8:	e00c      	b.n	8000304 <Flash_Read_String+0x54>
				    _Array_DATA_[i] = *(uint8_t *)(_ADDRESS_DATA_ + (uint32_t)(i*2U));
 80002ea:	8afb      	ldrh	r3, [r7, #22]
 80002ec:	005a      	lsls	r2, r3, #1
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	4413      	add	r3, r2
 80002f2:	4619      	mov	r1, r3
 80002f4:	8afb      	ldrh	r3, [r7, #22]
 80002f6:	68fa      	ldr	r2, [r7, #12]
 80002f8:	4413      	add	r3, r2
 80002fa:	780a      	ldrb	r2, [r1, #0]
 80002fc:	701a      	strb	r2, [r3, #0]
				 for(uint16_t i = 0; i < _LENGTH_; i++)
 80002fe:	8afb      	ldrh	r3, [r7, #22]
 8000300:	3301      	adds	r3, #1
 8000302:	82fb      	strh	r3, [r7, #22]
 8000304:	8afa      	ldrh	r2, [r7, #22]
 8000306:	88fb      	ldrh	r3, [r7, #6]
 8000308:	429a      	cmp	r2, r3
 800030a:	d3ee      	bcc.n	80002ea <Flash_Read_String+0x3a>
	   HAL_FLASH_Lock();
 800030c:	f001 ff42 	bl	8002194 <HAL_FLASH_Lock>
	//___enable_systick___
	    uwTickFreq = tick_freq;
 8000310:	4a08      	ldr	r2, [pc, #32]	; (8000334 <Flash_Read_String+0x84>)
 8000312:	7d7b      	ldrb	r3, [r7, #21]
 8000314:	7013      	strb	r3, [r2, #0]
     	uwTick     = tick_var;
 8000316:	4a08      	ldr	r2, [pc, #32]	; (8000338 <Flash_Read_String+0x88>)
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	6013      	str	r3, [r2, #0]
    	SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800031c:	4b04      	ldr	r3, [pc, #16]	; (8000330 <Flash_Read_String+0x80>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a03      	ldr	r2, [pc, #12]	; (8000330 <Flash_Read_String+0x80>)
 8000322:	f043 0302 	orr.w	r3, r3, #2
 8000326:	6013      	str	r3, [r2, #0]
			 
			 
}
 8000328:	bf00      	nop
 800032a:	3718      	adds	r7, #24
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	e000e010 	.word	0xe000e010
 8000334:	20000014 	.word	0x20000014
 8000338:	200001a4 	.word	0x200001a4

0800033c <deleteBuffer8>:
    //_________STATIC FUNTION__________NO USE____

*/

static void deleteBuffer8(uint8_t* data, uint16_t _LENGTH_)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	807b      	strh	r3, [r7, #2]
	for(uint16_t i = 0; i < _LENGTH_; i++)
 8000348:	2300      	movs	r3, #0
 800034a:	81fb      	strh	r3, [r7, #14]
 800034c:	e007      	b.n	800035e <deleteBuffer8+0x22>
	{
		data[i] = 0;
 800034e:	89fb      	ldrh	r3, [r7, #14]
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	4413      	add	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < _LENGTH_; i++)
 8000358:	89fb      	ldrh	r3, [r7, #14]
 800035a:	3301      	adds	r3, #1
 800035c:	81fb      	strh	r3, [r7, #14]
 800035e:	89fa      	ldrh	r2, [r7, #14]
 8000360:	887b      	ldrh	r3, [r7, #2]
 8000362:	429a      	cmp	r2, r3
 8000364:	d3f3      	bcc.n	800034e <deleteBuffer8+0x12>
	}
}
 8000366:	bf00      	nop
 8000368:	bf00      	nop
 800036a:	3714      	adds	r7, #20
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr
	...

08000374 <Flash_Erase>:
		data[i] = 0;
	}
}
//___ Clear_page_________
static void Flash_Erase(uint32_t addr) 
{ 
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  while((FLASH->SR&FLASH_SR_BSY));
 800037c:	bf00      	nop
 800037e:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <Flash_Erase+0x64>)
 8000380:	68db      	ldr	r3, [r3, #12]
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	2b00      	cmp	r3, #0
 8000388:	d1f9      	bne.n	800037e <Flash_Erase+0xa>
  FLASH->CR |= FLASH_CR_PER;    //Page Erase Set
 800038a:	4b13      	ldr	r3, [pc, #76]	; (80003d8 <Flash_Erase+0x64>)
 800038c:	691b      	ldr	r3, [r3, #16]
 800038e:	4a12      	ldr	r2, [pc, #72]	; (80003d8 <Flash_Erase+0x64>)
 8000390:	f043 0302 	orr.w	r3, r3, #2
 8000394:	6113      	str	r3, [r2, #16]
  FLASH->AR = addr;              //Page Address
 8000396:	4a10      	ldr	r2, [pc, #64]	; (80003d8 <Flash_Erase+0x64>)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	6153      	str	r3, [r2, #20]
  FLASH->CR |= FLASH_CR_STRT; //Start Page Erase
 800039c:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <Flash_Erase+0x64>)
 800039e:	691b      	ldr	r3, [r3, #16]
 80003a0:	4a0d      	ldr	r2, [pc, #52]	; (80003d8 <Flash_Erase+0x64>)
 80003a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003a6:	6113      	str	r3, [r2, #16]
  while((FLASH->SR&FLASH_SR_BSY));
 80003a8:	bf00      	nop
 80003aa:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <Flash_Erase+0x64>)
 80003ac:	68db      	ldr	r3, [r3, #12]
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d1f9      	bne.n	80003aa <Flash_Erase+0x36>
	FLASH->CR &= ~FLASH_SR_BSY;
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <Flash_Erase+0x64>)
 80003b8:	691b      	ldr	r3, [r3, #16]
 80003ba:	4a07      	ldr	r2, [pc, #28]	; (80003d8 <Flash_Erase+0x64>)
 80003bc:	f023 0301 	bic.w	r3, r3, #1
 80003c0:	6113      	str	r3, [r2, #16]
  FLASH->CR &= ~FLASH_CR_PER; //Page Erase Clear
 80003c2:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <Flash_Erase+0x64>)
 80003c4:	691b      	ldr	r3, [r3, #16]
 80003c6:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <Flash_Erase+0x64>)
 80003c8:	f023 0302 	bic.w	r3, r3, #2
 80003cc:	6113      	str	r3, [r2, #16]
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	40022000 	.word	0x40022000

080003dc <key_pad>:
#include "key_pad_PTV.h"
#include "main.h"

uint8_t key_pad()
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin (GPIOA,GPIO_PIN_0, GPIO_PIN_RESET);  //Pull the R1 low
 80003e0:	2200      	movs	r2, #0
 80003e2:	2101      	movs	r1, #1
 80003e4:	48b5      	ldr	r0, [pc, #724]	; (80006bc <key_pad+0x2e0>)
 80003e6:	f002 f880 	bl	80024ea <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, GPIO_PIN_SET);  // Pull the R2 High
 80003ea:	2201      	movs	r2, #1
 80003ec:	2102      	movs	r1, #2
 80003ee:	48b3      	ldr	r0, [pc, #716]	; (80006bc <key_pad+0x2e0>)
 80003f0:	f002 f87b 	bl	80024ea <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (GPIOA, GPIO_PIN_2, GPIO_PIN_SET);  // Pull the R3 High
 80003f4:	2201      	movs	r2, #1
 80003f6:	2104      	movs	r1, #4
 80003f8:	48b0      	ldr	r0, [pc, #704]	; (80006bc <key_pad+0x2e0>)
 80003fa:	f002 f876 	bl	80024ea <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, GPIO_PIN_SET);  // Pull the R4 High
 80003fe:	2201      	movs	r2, #1
 8000400:	2108      	movs	r1, #8
 8000402:	48ae      	ldr	r0, [pc, #696]	; (80006bc <key_pad+0x2e0>)
 8000404:	f002 f871 	bl	80024ea <HAL_GPIO_WritePin>

	  if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12)))   // if the Col 1 is low
 8000408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800040c:	48ac      	ldr	r0, [pc, #688]	; (80006c0 <key_pad+0x2e4>)
 800040e:	f002 f855 	bl	80024bc <HAL_GPIO_ReadPin>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d10a      	bne.n	800042e <key_pad+0x52>
	  {
	  	while (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12)));   // wait till the button is pressed
 8000418:	bf00      	nop
 800041a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800041e:	48a8      	ldr	r0, [pc, #672]	; (80006c0 <key_pad+0x2e4>)
 8000420:	f002 f84c 	bl	80024bc <HAL_GPIO_ReadPin>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d0f7      	beq.n	800041a <key_pad+0x3e>
            return '1';
 800042a:	2331      	movs	r3, #49	; 0x31
 800042c:	e15e      	b.n	80006ec <key_pad+0x310>
	  }

	  if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13)))   // if the Col 2 is low
 800042e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000432:	48a3      	ldr	r0, [pc, #652]	; (80006c0 <key_pad+0x2e4>)
 8000434:	f002 f842 	bl	80024bc <HAL_GPIO_ReadPin>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d10a      	bne.n	8000454 <key_pad+0x78>
	  {
	  	while (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13)));   // wait till the button is pressed
 800043e:	bf00      	nop
 8000440:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000444:	489e      	ldr	r0, [pc, #632]	; (80006c0 <key_pad+0x2e4>)
 8000446:	f002 f839 	bl	80024bc <HAL_GPIO_ReadPin>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d0f7      	beq.n	8000440 <key_pad+0x64>
	  	return '2';
 8000450:	2332      	movs	r3, #50	; 0x32
 8000452:	e14b      	b.n	80006ec <key_pad+0x310>
	  }

	  if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_14)))   // if the Col 3 is low
 8000454:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000458:	4899      	ldr	r0, [pc, #612]	; (80006c0 <key_pad+0x2e4>)
 800045a:	f002 f82f 	bl	80024bc <HAL_GPIO_ReadPin>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d10a      	bne.n	800047a <key_pad+0x9e>
	  {
	  	while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_14)));   // wait till the button is pressed
 8000464:	bf00      	nop
 8000466:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800046a:	4894      	ldr	r0, [pc, #592]	; (80006bc <key_pad+0x2e0>)
 800046c:	f002 f826 	bl	80024bc <HAL_GPIO_ReadPin>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d0f7      	beq.n	8000466 <key_pad+0x8a>
	  	return '3';
 8000476:	2333      	movs	r3, #51	; 0x33
 8000478:	e138      	b.n	80006ec <key_pad+0x310>
	  }

	  if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)))   // if the Col 4 is low
 800047a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800047e:	4890      	ldr	r0, [pc, #576]	; (80006c0 <key_pad+0x2e4>)
 8000480:	f002 f81c 	bl	80024bc <HAL_GPIO_ReadPin>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d10a      	bne.n	80004a0 <key_pad+0xc4>
	  {
	  	while (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)));   // wait till the button is pressed
 800048a:	bf00      	nop
 800048c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000490:	488b      	ldr	r0, [pc, #556]	; (80006c0 <key_pad+0x2e4>)
 8000492:	f002 f813 	bl	80024bc <HAL_GPIO_ReadPin>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d0f7      	beq.n	800048c <key_pad+0xb0>
	  	return 'A';
 800049c:	2341      	movs	r3, #65	; 0x41
 800049e:	e125      	b.n	80006ec <key_pad+0x310>
	  }
	  // second row set to 0
	  HAL_GPIO_WritePin (GPIOA,GPIO_PIN_0, GPIO_PIN_SET);  //Pull the R1 low
 80004a0:	2201      	movs	r2, #1
 80004a2:	2101      	movs	r1, #1
 80004a4:	4885      	ldr	r0, [pc, #532]	; (80006bc <key_pad+0x2e0>)
 80004a6:	f002 f820 	bl	80024ea <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);  // Pull the R2 High
 80004aa:	2200      	movs	r2, #0
 80004ac:	2102      	movs	r1, #2
 80004ae:	4883      	ldr	r0, [pc, #524]	; (80006bc <key_pad+0x2e0>)
 80004b0:	f002 f81b 	bl	80024ea <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin (GPIOA, GPIO_PIN_2, GPIO_PIN_SET);  // Pull the R3 High
 80004b4:	2201      	movs	r2, #1
 80004b6:	2104      	movs	r1, #4
 80004b8:	4880      	ldr	r0, [pc, #512]	; (80006bc <key_pad+0x2e0>)
 80004ba:	f002 f816 	bl	80024ea <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, GPIO_PIN_SET);  // Pull the R4 High
 80004be:	2201      	movs	r2, #1
 80004c0:	2108      	movs	r1, #8
 80004c2:	487e      	ldr	r0, [pc, #504]	; (80006bc <key_pad+0x2e0>)
 80004c4:	f002 f811 	bl	80024ea <HAL_GPIO_WritePin>

	  	  if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12)))   // if the Col 1 is low
 80004c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004cc:	487c      	ldr	r0, [pc, #496]	; (80006c0 <key_pad+0x2e4>)
 80004ce:	f001 fff5 	bl	80024bc <HAL_GPIO_ReadPin>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d10a      	bne.n	80004ee <key_pad+0x112>
	  	  {
	  	  	while (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12)));   // wait till the button is pressed
 80004d8:	bf00      	nop
 80004da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004de:	4878      	ldr	r0, [pc, #480]	; (80006c0 <key_pad+0x2e4>)
 80004e0:	f001 ffec 	bl	80024bc <HAL_GPIO_ReadPin>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d0f7      	beq.n	80004da <key_pad+0xfe>
	  	  	return '4';
 80004ea:	2334      	movs	r3, #52	; 0x34
 80004ec:	e0fe      	b.n	80006ec <key_pad+0x310>
	  	  }

	  	  if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13)))   // if the Col 2 is low
 80004ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f2:	4873      	ldr	r0, [pc, #460]	; (80006c0 <key_pad+0x2e4>)
 80004f4:	f001 ffe2 	bl	80024bc <HAL_GPIO_ReadPin>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d10a      	bne.n	8000514 <key_pad+0x138>
	  	  {
	  	  	while (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13)));   // wait till the button is pressed
 80004fe:	bf00      	nop
 8000500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000504:	486e      	ldr	r0, [pc, #440]	; (80006c0 <key_pad+0x2e4>)
 8000506:	f001 ffd9 	bl	80024bc <HAL_GPIO_ReadPin>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0f7      	beq.n	8000500 <key_pad+0x124>
	  	  	return '5';
 8000510:	2335      	movs	r3, #53	; 0x35
 8000512:	e0eb      	b.n	80006ec <key_pad+0x310>
	  	  }

	  	  if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_14)))   // if the Col 3 is low
 8000514:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000518:	4869      	ldr	r0, [pc, #420]	; (80006c0 <key_pad+0x2e4>)
 800051a:	f001 ffcf 	bl	80024bc <HAL_GPIO_ReadPin>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d10a      	bne.n	800053a <key_pad+0x15e>
	  	  {
	  	  	while (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_14)));   // wait till the button is pressed
 8000524:	bf00      	nop
 8000526:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800052a:	4865      	ldr	r0, [pc, #404]	; (80006c0 <key_pad+0x2e4>)
 800052c:	f001 ffc6 	bl	80024bc <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0f7      	beq.n	8000526 <key_pad+0x14a>
	  	  	return '6';
 8000536:	2336      	movs	r3, #54	; 0x36
 8000538:	e0d8      	b.n	80006ec <key_pad+0x310>
	  	  }

	  	  if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)))   // if the Col 4 is low
 800053a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800053e:	4860      	ldr	r0, [pc, #384]	; (80006c0 <key_pad+0x2e4>)
 8000540:	f001 ffbc 	bl	80024bc <HAL_GPIO_ReadPin>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d10a      	bne.n	8000560 <key_pad+0x184>
	  	  {
	  	  	while (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)));   // wait till the button is pressed
 800054a:	bf00      	nop
 800054c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000550:	485b      	ldr	r0, [pc, #364]	; (80006c0 <key_pad+0x2e4>)
 8000552:	f001 ffb3 	bl	80024bc <HAL_GPIO_ReadPin>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d0f7      	beq.n	800054c <key_pad+0x170>
	  	  	return 'B';
 800055c:	2342      	movs	r3, #66	; 0x42
 800055e:	e0c5      	b.n	80006ec <key_pad+0x310>
	  	  }
	  // Third row to 0
	  	HAL_GPIO_WritePin (GPIOA,GPIO_PIN_0, GPIO_PIN_SET);  //Pull the R1 low
 8000560:	2201      	movs	r2, #1
 8000562:	2101      	movs	r1, #1
 8000564:	4855      	ldr	r0, [pc, #340]	; (80006bc <key_pad+0x2e0>)
 8000566:	f001 ffc0 	bl	80024ea <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, GPIO_PIN_SET);  // Pull the R2 High
 800056a:	2201      	movs	r2, #1
 800056c:	2102      	movs	r1, #2
 800056e:	4853      	ldr	r0, [pc, #332]	; (80006bc <key_pad+0x2e0>)
 8000570:	f001 ffbb 	bl	80024ea <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);  // Pull the R3 High
 8000574:	2200      	movs	r2, #0
 8000576:	2104      	movs	r1, #4
 8000578:	4850      	ldr	r0, [pc, #320]	; (80006bc <key_pad+0x2e0>)
 800057a:	f001 ffb6 	bl	80024ea <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, GPIO_PIN_SET);  // Pull the R4 High
 800057e:	2201      	movs	r2, #1
 8000580:	2108      	movs	r1, #8
 8000582:	484e      	ldr	r0, [pc, #312]	; (80006bc <key_pad+0x2e0>)
 8000584:	f001 ffb1 	bl	80024ea <HAL_GPIO_WritePin>

	  		if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12)))   // if the Col 1 is low
 8000588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058c:	484c      	ldr	r0, [pc, #304]	; (80006c0 <key_pad+0x2e4>)
 800058e:	f001 ff95 	bl	80024bc <HAL_GPIO_ReadPin>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d10a      	bne.n	80005ae <key_pad+0x1d2>
	  		  {
	  		  	while (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12)));   // wait till the button is pressed
 8000598:	bf00      	nop
 800059a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059e:	4848      	ldr	r0, [pc, #288]	; (80006c0 <key_pad+0x2e4>)
 80005a0:	f001 ff8c 	bl	80024bc <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f7      	beq.n	800059a <key_pad+0x1be>
	  		  	return '7';
 80005aa:	2337      	movs	r3, #55	; 0x37
 80005ac:	e09e      	b.n	80006ec <key_pad+0x310>
	  		  }

	  		  if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13)))   // if the Col 2 is low
 80005ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b2:	4843      	ldr	r0, [pc, #268]	; (80006c0 <key_pad+0x2e4>)
 80005b4:	f001 ff82 	bl	80024bc <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d10a      	bne.n	80005d4 <key_pad+0x1f8>
	  		  {
	  		  	while (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13)));   // wait till the button is pressed
 80005be:	bf00      	nop
 80005c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c4:	483e      	ldr	r0, [pc, #248]	; (80006c0 <key_pad+0x2e4>)
 80005c6:	f001 ff79 	bl	80024bc <HAL_GPIO_ReadPin>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d0f7      	beq.n	80005c0 <key_pad+0x1e4>
	  		  	return '8';
 80005d0:	2338      	movs	r3, #56	; 0x38
 80005d2:	e08b      	b.n	80006ec <key_pad+0x310>
	  		  }

	  		  if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_14)))   // if the Col 3 is low
 80005d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d8:	4839      	ldr	r0, [pc, #228]	; (80006c0 <key_pad+0x2e4>)
 80005da:	f001 ff6f 	bl	80024bc <HAL_GPIO_ReadPin>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d10a      	bne.n	80005fa <key_pad+0x21e>
	  		  {
	  		  	while (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_14)));   // wait till the button is pressed
 80005e4:	bf00      	nop
 80005e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ea:	4835      	ldr	r0, [pc, #212]	; (80006c0 <key_pad+0x2e4>)
 80005ec:	f001 ff66 	bl	80024bc <HAL_GPIO_ReadPin>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f7      	beq.n	80005e6 <key_pad+0x20a>
	  		  	return '9';
 80005f6:	2339      	movs	r3, #57	; 0x39
 80005f8:	e078      	b.n	80006ec <key_pad+0x310>
	  		  }

	  		  if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)))   // if the Col 4 is low
 80005fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005fe:	4830      	ldr	r0, [pc, #192]	; (80006c0 <key_pad+0x2e4>)
 8000600:	f001 ff5c 	bl	80024bc <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d10a      	bne.n	8000620 <key_pad+0x244>
	  		  {
	  		  	while (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)));   // wait till the button is pressed
 800060a:	bf00      	nop
 800060c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000610:	482b      	ldr	r0, [pc, #172]	; (80006c0 <key_pad+0x2e4>)
 8000612:	f001 ff53 	bl	80024bc <HAL_GPIO_ReadPin>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d0f7      	beq.n	800060c <key_pad+0x230>
	  		  	return 'C';
 800061c:	2343      	movs	r3, #67	; 0x43
 800061e:	e065      	b.n	80006ec <key_pad+0x310>
	  		  }
	  	// Fourth row to 0
	  		HAL_GPIO_WritePin (GPIOA,GPIO_PIN_0, GPIO_PIN_SET);  //Pull the R1 low
 8000620:	2201      	movs	r2, #1
 8000622:	2101      	movs	r1, #1
 8000624:	4825      	ldr	r0, [pc, #148]	; (80006bc <key_pad+0x2e0>)
 8000626:	f001 ff60 	bl	80024ea <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, GPIO_PIN_SET);  // Pull the R2 High
 800062a:	2201      	movs	r2, #1
 800062c:	2102      	movs	r1, #2
 800062e:	4823      	ldr	r0, [pc, #140]	; (80006bc <key_pad+0x2e0>)
 8000630:	f001 ff5b 	bl	80024ea <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_2, GPIO_PIN_SET);  // Pull the R3 High
 8000634:	2201      	movs	r2, #1
 8000636:	2104      	movs	r1, #4
 8000638:	4820      	ldr	r0, [pc, #128]	; (80006bc <key_pad+0x2e0>)
 800063a:	f001 ff56 	bl	80024ea <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);  // Pull the R4 High
 800063e:	2200      	movs	r2, #0
 8000640:	2108      	movs	r1, #8
 8000642:	481e      	ldr	r0, [pc, #120]	; (80006bc <key_pad+0x2e0>)
 8000644:	f001 ff51 	bl	80024ea <HAL_GPIO_WritePin>

	  			  if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12)))   // if the Col 1 is low
 8000648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064c:	481c      	ldr	r0, [pc, #112]	; (80006c0 <key_pad+0x2e4>)
 800064e:	f001 ff35 	bl	80024bc <HAL_GPIO_ReadPin>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d10a      	bne.n	800066e <key_pad+0x292>
	  			  {
	  			  	while (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12)));   // wait till the button is pressed
 8000658:	bf00      	nop
 800065a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065e:	4818      	ldr	r0, [pc, #96]	; (80006c0 <key_pad+0x2e4>)
 8000660:	f001 ff2c 	bl	80024bc <HAL_GPIO_ReadPin>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0f7      	beq.n	800065a <key_pad+0x27e>
	  			  	return '*';
 800066a:	232a      	movs	r3, #42	; 0x2a
 800066c:	e03e      	b.n	80006ec <key_pad+0x310>
	  			  }

	  			  if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13)))   // if the Col 2 is low
 800066e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000672:	4813      	ldr	r0, [pc, #76]	; (80006c0 <key_pad+0x2e4>)
 8000674:	f001 ff22 	bl	80024bc <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d10a      	bne.n	8000694 <key_pad+0x2b8>
	  			  {
	  			  	while (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_13)));   // wait till the button is pressed
 800067e:	bf00      	nop
 8000680:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000684:	480e      	ldr	r0, [pc, #56]	; (80006c0 <key_pad+0x2e4>)
 8000686:	f001 ff19 	bl	80024bc <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d0f7      	beq.n	8000680 <key_pad+0x2a4>
	  			  	return '0';
 8000690:	2330      	movs	r3, #48	; 0x30
 8000692:	e02b      	b.n	80006ec <key_pad+0x310>
	  			  }

	  			  if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_14)))   // if the Col 3 is low
 8000694:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000698:	4809      	ldr	r0, [pc, #36]	; (80006c0 <key_pad+0x2e4>)
 800069a:	f001 ff0f 	bl	80024bc <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d10f      	bne.n	80006c4 <key_pad+0x2e8>
	  			  {
	  			  	while (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_14)));   // wait till the button is pressed
 80006a4:	bf00      	nop
 80006a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <key_pad+0x2e4>)
 80006ac:	f001 ff06 	bl	80024bc <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d0f7      	beq.n	80006a6 <key_pad+0x2ca>
	  			  	return '#';
 80006b6:	2323      	movs	r3, #35	; 0x23
 80006b8:	e018      	b.n	80006ec <key_pad+0x310>
 80006ba:	bf00      	nop
 80006bc:	40010800 	.word	0x40010800
 80006c0:	40010c00 	.word	0x40010c00
	  			  }

	  			  if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)))   // if the Col 4 is low
 80006c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c8:	4809      	ldr	r0, [pc, #36]	; (80006f0 <key_pad+0x314>)
 80006ca:	f001 fef7 	bl	80024bc <HAL_GPIO_ReadPin>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d10a      	bne.n	80006ea <key_pad+0x30e>
	  			  {
	  			  	while (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_15)));   // wait till the button is pressed
 80006d4:	bf00      	nop
 80006d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <key_pad+0x314>)
 80006dc:	f001 feee 	bl	80024bc <HAL_GPIO_ReadPin>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d0f7      	beq.n	80006d6 <key_pad+0x2fa>
	  			  	return 'D';
 80006e6:	2344      	movs	r3, #68	; 0x44
 80006e8:	e000      	b.n	80006ec <key_pad+0x310>
	  			  }

	  			  return 0xFF;
 80006ea:	23ff      	movs	r3, #255	; 0xff

}
 80006ec:	4618      	mov	r0, r3
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40010c00 	.word	0x40010c00

080006f4 <lcd_i2c_init>:

#include "lcd_i2c.h"


void lcd_i2c_init(LCD_I2C_HandleTypeDef *p_LCD, I2C_HandleTypeDef *p_hi2c, uint8_t p_col, uint8_t p_row, uint8_t p_Slave_Address)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	4611      	mov	r1, r2
 8000700:	461a      	mov	r2, r3
 8000702:	460b      	mov	r3, r1
 8000704:	71fb      	strb	r3, [r7, #7]
 8000706:	4613      	mov	r3, r2
 8000708:	71bb      	strb	r3, [r7, #6]
	p_LCD->SLAVE_ADDRESS = p_Slave_Address;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	7e3a      	ldrb	r2, [r7, #24]
 800070e:	709a      	strb	r2, [r3, #2]
	p_LCD->LCD_Backlight_Value = lcd_backlight_on;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	2208      	movs	r2, #8
 8000714:	70da      	strb	r2, [r3, #3]
	p_LCD->LCD_Columns = p_col;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	79fa      	ldrb	r2, [r7, #7]
 800071a:	701a      	strb	r2, [r3, #0]
	p_LCD->LCD_Rows = p_row;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	79ba      	ldrb	r2, [r7, #6]
 8000720:	705a      	strb	r2, [r3, #1]
	p_LCD->hi2c = p_hi2c;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	68ba      	ldr	r2, [r7, #8]
 8000726:	609a      	str	r2, [r3, #8]
	p_LCD->LCD_Display_Option = lcd_display_on | lcd_cursor_off | lcd_blinkOff;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	2204      	movs	r2, #4
 800072c:	711a      	strb	r2, [r3, #4]


	//4 bit initialization
	HAL_Delay(40); 	//waiting for > 40ms
 800072e:	2028      	movs	r0, #40	; 0x28
 8000730:	f001 fc02 	bl	8001f38 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x30);
 8000734:	2130      	movs	r1, #48	; 0x30
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	f000 f847 	bl	80007ca <lcd_send_cmd>
	HAL_Delay(5);  // waiting for >4.1ms
 800073c:	2005      	movs	r0, #5
 800073e:	f001 fbfb 	bl	8001f38 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x30);
 8000742:	2130      	movs	r1, #48	; 0x30
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f000 f840 	bl	80007ca <lcd_send_cmd>
	HAL_Delay(1);  // waiting for >100us
 800074a:	2001      	movs	r0, #1
 800074c:	f001 fbf4 	bl	8001f38 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x30);
 8000750:	2130      	movs	r1, #48	; 0x30
 8000752:	68f8      	ldr	r0, [r7, #12]
 8000754:	f000 f839 	bl	80007ca <lcd_send_cmd>
	HAL_Delay(10);
 8000758:	200a      	movs	r0, #10
 800075a:	f001 fbed 	bl	8001f38 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x20);	//4 bit mode
 800075e:	2120      	movs	r1, #32
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f000 f832 	bl	80007ca <lcd_send_cmd>
	HAL_Delay(10);
 8000766:	200a      	movs	r0, #10
 8000768:	f001 fbe6 	bl	8001f38 <HAL_Delay>

	//display initialization
	lcd_send_cmd(p_LCD, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800076c:	2128      	movs	r1, #40	; 0x28
 800076e:	68f8      	ldr	r0, [r7, #12]
 8000770:	f000 f82b 	bl	80007ca <lcd_send_cmd>
	HAL_Delay(1);
 8000774:	2001      	movs	r0, #1
 8000776:	f001 fbdf 	bl	8001f38 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off		HAL_Delay(1);
 800077a:	2108      	movs	r1, #8
 800077c:	68f8      	ldr	r0, [r7, #12]
 800077e:	f000 f824 	bl	80007ca <lcd_send_cmd>
	HAL_Delay(1);
 8000782:	2001      	movs	r0, #1
 8000784:	f001 fbd8 	bl	8001f38 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x01);  // clear display
 8000788:	2101      	movs	r1, #1
 800078a:	68f8      	ldr	r0, [r7, #12]
 800078c:	f000 f81d 	bl	80007ca <lcd_send_cmd>
	HAL_Delay(1);
 8000790:	2001      	movs	r0, #1
 8000792:	f001 fbd1 	bl	8001f38 <HAL_Delay>
	HAL_Delay(1);
 8000796:	2001      	movs	r0, #1
 8000798:	f001 fbce 	bl	8001f38 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800079c:	2106      	movs	r1, #6
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f000 f813 	bl	80007ca <lcd_send_cmd>
	HAL_Delay(1);
 80007a4:	2001      	movs	r0, #1
 80007a6:	f001 fbc7 	bl	8001f38 <HAL_Delay>
	lcd_send_cmd(p_LCD, lcd_displaycontrol | p_LCD -> LCD_Display_Option); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	791b      	ldrb	r3, [r3, #4]
 80007ae:	f043 0308 	orr.w	r3, r3, #8
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4619      	mov	r1, r3
 80007b6:	68f8      	ldr	r0, [r7, #12]
 80007b8:	f000 f807 	bl	80007ca <lcd_send_cmd>
	HAL_Delay(1);
 80007bc:	2001      	movs	r0, #1
 80007be:	f001 fbbb 	bl	8001f38 <HAL_Delay>
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <lcd_send_cmd>:

void lcd_send_cmd (LCD_I2C_HandleTypeDef *p_lcd, char cmd)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b086      	sub	sp, #24
 80007ce:	af02      	add	r7, sp, #8
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	460b      	mov	r3, r1
 80007d4:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd & 0xf0);
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	f023 030f 	bic.w	r3, r3, #15
 80007dc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4) & 0xf0);
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	011b      	lsls	r3, r3, #4
 80007e2:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0C;	//en=1, rs=0
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	f043 030c 	orr.w	r3, r3, #12
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x08;	//en=0, rs=0
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;	//en=1, rs=0
 80007f8:	7bbb      	ldrb	r3, [r7, #14]
 80007fa:	f043 030c 	orr.w	r3, r3, #12
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;	//en=0, rs=1
 8000802:	7bbb      	ldrb	r3, [r7, #14]
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	b2db      	uxtb	r3, r3
 800080a:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, data_t, 4, 100);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6898      	ldr	r0, [r3, #8]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	789b      	ldrb	r3, [r3, #2]
 8000814:	b299      	uxth	r1, r3
 8000816:	f107 0208 	add.w	r2, r7, #8
 800081a:	2364      	movs	r3, #100	; 0x64
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2304      	movs	r3, #4
 8000820:	f001 ffc0 	bl	80027a4 <HAL_I2C_Master_Transmit>
}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <lcd_send_data>:

void lcd_send_data (LCD_I2C_HandleTypeDef *p_LCD, char data)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af02      	add	r7, sp, #8
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (data & 0xf0);
 8000838:	78fb      	ldrb	r3, [r7, #3]
 800083a:	f023 030f 	bic.w	r3, r3, #15
 800083e:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	011b      	lsls	r3, r3, #4
 8000844:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0D; //en=1, rs=0
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	f043 030d 	orr.w	r3, r3, #13
 800084c:	b2db      	uxtb	r3, r3
 800084e:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x09; //en=0, rs=0
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	f043 0309 	orr.w	r3, r3, #9
 8000856:	b2db      	uxtb	r3, r3
 8000858:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	f043 030d 	orr.w	r3, r3, #13
 8000860:	b2db      	uxtb	r3, r3
 8000862:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 8000864:	7bbb      	ldrb	r3, [r7, #14]
 8000866:	f043 0309 	orr.w	r3, r3, #9
 800086a:	b2db      	uxtb	r3, r3
 800086c:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_LCD -> hi2c, p_LCD->SLAVE_ADDRESS, data_t, 4, 100);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6898      	ldr	r0, [r3, #8]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	789b      	ldrb	r3, [r3, #2]
 8000876:	b299      	uxth	r1, r3
 8000878:	f107 0208 	add.w	r2, r7, #8
 800087c:	2364      	movs	r3, #100	; 0x64
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	2304      	movs	r3, #4
 8000882:	f001 ff8f 	bl	80027a4 <HAL_I2C_Master_Transmit>
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <lcd_set_cursor>:


void lcd_set_cursor(LCD_I2C_HandleTypeDef *p_LCD, uint8_t p_col, uint8_t p_row)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	70fb      	strb	r3, [r7, #3]
 800089c:	4613      	mov	r3, r2
 800089e:	70bb      	strb	r3, [r7, #2]
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <lcd_set_cursor+0x50>)
 80008a2:	60fb      	str	r3, [r7, #12]
	if(p_row > p_LCD->LCD_Rows) p_row = p_LCD->LCD_Rows - 1;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	785b      	ldrb	r3, [r3, #1]
 80008a8:	78ba      	ldrb	r2, [r7, #2]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d903      	bls.n	80008b6 <lcd_set_cursor+0x26>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	785b      	ldrb	r3, [r3, #1]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	70bb      	strb	r3, [r7, #2]
	lcd_send_cmd(p_LCD, 0x80 | (p_col + t_row_Offets[p_row]));
 80008b6:	78bb      	ldrb	r3, [r7, #2]
 80008b8:	3310      	adds	r3, #16
 80008ba:	443b      	add	r3, r7
 80008bc:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80008c0:	78fb      	ldrb	r3, [r7, #3]
 80008c2:	4413      	add	r3, r2
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	b25b      	sxtb	r3, r3
 80008c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	4619      	mov	r1, r3
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff ff79 	bl	80007ca <lcd_send_cmd>
}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	54144000 	.word	0x54144000

080008e4 <lcd_send_string>:

void lcd_send_string (LCD_I2C_HandleTypeDef *p_LCD, char *str)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
	while (*str) lcd_send_data(p_LCD, *str++);
 80008ee:	e007      	b.n	8000900 <lcd_send_string+0x1c>
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	603a      	str	r2, [r7, #0]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff ff96 	bl	800082c <lcd_send_data>
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d1f3      	bne.n	80008f0 <lcd_send_string+0xc>
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <lcd_clear>:

void lcd_clear (LCD_I2C_HandleTypeDef *p_LCD)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
	lcd_send_cmd(p_LCD, lcd_cleardisplay);
 800091a:	2101      	movs	r1, #1
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff ff54 	bl	80007ca <lcd_send_cmd>
	HAL_Delay(5);
 8000922:	2005      	movs	r0, #5
 8000924:	f001 fb08 	bl	8001f38 <HAL_Delay>
	lcd_set_cursor(p_LCD, 0, 0);
 8000928:	2200      	movs	r2, #0
 800092a:	2100      	movs	r1, #0
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ffaf 	bl	8000890 <lcd_set_cursor>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <CheckPass>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t CheckPass(char *Str1, char *Str2)
{
 800093a:	b480      	push	{r7}
 800093c:	b085      	sub	sp, #20
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6039      	str	r1, [r7, #0]
	for(int i=0;i<5;i++)
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	e00e      	b.n	8000968 <CheckPass+0x2e>
	{
		if(Str1[i]!=Str2[i])
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	4413      	add	r3, r2
 8000950:	781a      	ldrb	r2, [r3, #0]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	6839      	ldr	r1, [r7, #0]
 8000956:	440b      	add	r3, r1
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	429a      	cmp	r2, r3
 800095c:	d001      	beq.n	8000962 <CheckPass+0x28>
			return 0;
 800095e:	2300      	movs	r3, #0
 8000960:	e006      	b.n	8000970 <CheckPass+0x36>
	for(int i=0;i<5;i++)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	3301      	adds	r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2b04      	cmp	r3, #4
 800096c:	dded      	ble.n	800094a <CheckPass+0x10>
	}
	return 1;
 800096e:	2301      	movs	r3, #1
}
 8000970:	4618      	mov	r0, r3
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
	...

0800097c <EnterPassWord>:

void EnterPassWord(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	HAL_Delay(25);
 8000980:	2019      	movs	r0, #25
 8000982:	f001 fad9 	bl	8001f38 <HAL_Delay>
	do
	{
		temp = key_pad();
 8000986:	f7ff fd29 	bl	80003dc <key_pad>
 800098a:	4603      	mov	r3, r0
 800098c:	461a      	mov	r2, r3
 800098e:	4b43      	ldr	r3, [pc, #268]	; (8000a9c <EnterPassWord+0x120>)
 8000990:	701a      	strb	r2, [r3, #0]
		if(temp != 0XFF && temp!='*'&& temp!='#')
 8000992:	4b42      	ldr	r3, [pc, #264]	; (8000a9c <EnterPassWord+0x120>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2bff      	cmp	r3, #255	; 0xff
 8000998:	d02a      	beq.n	80009f0 <EnterPassWord+0x74>
 800099a:	4b40      	ldr	r3, [pc, #256]	; (8000a9c <EnterPassWord+0x120>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b2a      	cmp	r3, #42	; 0x2a
 80009a0:	d026      	beq.n	80009f0 <EnterPassWord+0x74>
 80009a2:	4b3e      	ldr	r3, [pc, #248]	; (8000a9c <EnterPassWord+0x120>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b23      	cmp	r3, #35	; 0x23
 80009a8:	d022      	beq.n	80009f0 <EnterPassWord+0x74>
		{
			HAL_Delay(25);
 80009aa:	2019      	movs	r0, #25
 80009ac:	f001 fac4 	bl	8001f38 <HAL_Delay>
			keypass[cnt++] = temp;
 80009b0:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <EnterPassWord+0x124>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	1c5a      	adds	r2, r3, #1
 80009b6:	493a      	ldr	r1, [pc, #232]	; (8000aa0 <EnterPassWord+0x124>)
 80009b8:	600a      	str	r2, [r1, #0]
 80009ba:	4a38      	ldr	r2, [pc, #224]	; (8000a9c <EnterPassWord+0x120>)
 80009bc:	7811      	ldrb	r1, [r2, #0]
 80009be:	4a39      	ldr	r2, [pc, #228]	; (8000aa4 <EnterPassWord+0x128>)
 80009c0:	54d1      	strb	r1, [r2, r3]
			lcd_set_cursor(&p_LCD, 0, 1);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2100      	movs	r1, #0
 80009c6:	4838      	ldr	r0, [pc, #224]	; (8000aa8 <EnterPassWord+0x12c>)
 80009c8:	f7ff ff62 	bl	8000890 <lcd_set_cursor>
			lcd_send_string(&p_LCD, &temp);
 80009cc:	4933      	ldr	r1, [pc, #204]	; (8000a9c <EnterPassWord+0x120>)
 80009ce:	4836      	ldr	r0, [pc, #216]	; (8000aa8 <EnterPassWord+0x12c>)
 80009d0:	f7ff ff88 	bl	80008e4 <lcd_send_string>
			while(temp!= 0xFF) {temp = key_pad();}
 80009d4:	e005      	b.n	80009e2 <EnterPassWord+0x66>
 80009d6:	f7ff fd01 	bl	80003dc <key_pad>
 80009da:	4603      	mov	r3, r0
 80009dc:	461a      	mov	r2, r3
 80009de:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <EnterPassWord+0x120>)
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <EnterPassWord+0x120>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2bff      	cmp	r3, #255	; 0xff
 80009e8:	d1f5      	bne.n	80009d6 <EnterPassWord+0x5a>
			HAL_Delay(10);
 80009ea:	200a      	movs	r0, #10
 80009ec:	f001 faa4 	bl	8001f38 <HAL_Delay>
		}
	}	while(temp!='*'); //while dk dung
 80009f0:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <EnterPassWord+0x120>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b2a      	cmp	r3, #42	; 0x2a
 80009f6:	d1c6      	bne.n	8000986 <EnterPassWord+0xa>
	while(temp!= 0xFF) {temp = key_pad();}
 80009f8:	e005      	b.n	8000a06 <EnterPassWord+0x8a>
 80009fa:	f7ff fcef 	bl	80003dc <key_pad>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <EnterPassWord+0x120>)
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <EnterPassWord+0x120>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2bff      	cmp	r3, #255	; 0xff
 8000a0c:	d1f5      	bne.n	80009fa <EnterPassWord+0x7e>
	HAL_Delay(10);
 8000a0e:	200a      	movs	r0, #10
 8000a10:	f001 fa92 	bl	8001f38 <HAL_Delay>

	cnt=0;
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <EnterPassWord+0x124>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
	if(CheckPass(password,keypass)== 1)
 8000a1a:	4922      	ldr	r1, [pc, #136]	; (8000aa4 <EnterPassWord+0x128>)
 8000a1c:	4823      	ldr	r0, [pc, #140]	; (8000aac <EnterPassWord+0x130>)
 8000a1e:	f7ff ff8c 	bl	800093a <CheckPass>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d123      	bne.n	8000a70 <EnterPassWord+0xf4>
	{
//		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,1);
		lcd_clear(&p_LCD);
 8000a28:	481f      	ldr	r0, [pc, #124]	; (8000aa8 <EnterPassWord+0x12c>)
 8000a2a:	f7ff ff72 	bl	8000912 <lcd_clear>
		lcd_set_cursor(&p_LCD, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	481d      	ldr	r0, [pc, #116]	; (8000aa8 <EnterPassWord+0x12c>)
 8000a34:	f7ff ff2c 	bl	8000890 <lcd_set_cursor>
		lcd_send_string(&p_LCD, "Thanh Cong!");
 8000a38:	491d      	ldr	r1, [pc, #116]	; (8000ab0 <EnterPassWord+0x134>)
 8000a3a:	481b      	ldr	r0, [pc, #108]	; (8000aa8 <EnterPassWord+0x12c>)
 8000a3c:	f7ff ff52 	bl	80008e4 <lcd_send_string>
		HAL_Delay(1000);
 8000a40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a44:	f001 fa78 	bl	8001f38 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,30);
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <EnterPassWord+0x138>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	221e      	movs	r2, #30
 8000a4e:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(1000);
 8000a50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a54:	f001 fa70 	bl	8001f38 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,100);
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <EnterPassWord+0x138>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2264      	movs	r2, #100	; 0x64
 8000a5e:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(1000);
 8000a60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a64:	f001 fa68 	bl	8001f38 <HAL_Delay>
//		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);
		lcd_clear(&p_LCD);
 8000a68:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <EnterPassWord+0x12c>)
 8000a6a:	f7ff ff52 	bl	8000912 <lcd_clear>
		lcd_set_cursor(&p_LCD, 0, 0);
		lcd_send_string(&p_LCD, "MK sai!");
		HAL_Delay(1000);
		lcd_clear(&p_LCD);
	}
}
 8000a6e:	e012      	b.n	8000a96 <EnterPassWord+0x11a>
		lcd_clear(&p_LCD);
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <EnterPassWord+0x12c>)
 8000a72:	f7ff ff4e 	bl	8000912 <lcd_clear>
		lcd_set_cursor(&p_LCD, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <EnterPassWord+0x12c>)
 8000a7c:	f7ff ff08 	bl	8000890 <lcd_set_cursor>
		lcd_send_string(&p_LCD, "MK sai!");
 8000a80:	490d      	ldr	r1, [pc, #52]	; (8000ab8 <EnterPassWord+0x13c>)
 8000a82:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <EnterPassWord+0x12c>)
 8000a84:	f7ff ff2e 	bl	80008e4 <lcd_send_string>
		HAL_Delay(1000);
 8000a88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8c:	f001 fa54 	bl	8001f38 <HAL_Delay>
		lcd_clear(&p_LCD);
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <EnterPassWord+0x12c>)
 8000a92:	f7ff ff3e 	bl	8000912 <lcd_clear>
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000017c 	.word	0x2000017c
 8000aa0:	20000184 	.word	0x20000184
 8000aa4:	20000180 	.word	0x20000180
 8000aa8:	20000198 	.word	0x20000198
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	0800481c 	.word	0x0800481c
 8000ab4:	200000e0 	.word	0x200000e0
 8000ab8:	08004828 	.word	0x08004828

08000abc <hang_0>:

int hang_0(uint8_t mang[5])
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
    for(int i=0;i<5;i++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	e00a      	b.n	8000ae0 <hang_0+0x24>
    {
        if(mang[i]!=0)
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	4413      	add	r3, r2
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <hang_0+0x1e>
            return 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e006      	b.n	8000ae8 <hang_0+0x2c>
    for(int i=0;i<5;i++)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	3301      	adds	r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	ddf1      	ble.n	8000aca <hang_0+0xe>
    }
    return 1;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr

08000af2 <vi_tri>:

int vi_tri(uint8_t mang[5][5], int so_the)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b084      	sub	sp, #16
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	6039      	str	r1, [r7, #0]
    for(int i=0;i<so_the;i++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	e010      	b.n	8000b24 <vi_tri+0x32>
    {
        if(hang_0(mang[i]))
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	4613      	mov	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	4413      	add	r3, r2
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ffd4 	bl	8000abc <hang_0>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <vi_tri+0x2c>
            return i;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	e007      	b.n	8000b2e <vi_tri+0x3c>
    for(int i=0;i<so_the;i++)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3301      	adds	r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbea      	blt.n	8000b02 <vi_tri+0x10>
    }
    return 7;
 8000b2c:	2307      	movs	r3, #7
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <doi_hang>:

void doi_hang(uint8_t mang[5][5], int so_the)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b084      	sub	sp, #16
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
 8000b3e:	6039      	str	r1, [r7, #0]
    int a=vi_tri(mang,so_the);
 8000b40:	6839      	ldr	r1, [r7, #0]
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ffd5 	bl	8000af2 <vi_tri>
 8000b48:	60b8      	str	r0, [r7, #8]
    if((a!=7)&&(a!=so_the))
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	2b07      	cmp	r3, #7
 8000b4e:	d029      	beq.n	8000ba4 <doi_hang+0x6e>
 8000b50:	68ba      	ldr	r2, [r7, #8]
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d025      	beq.n	8000ba4 <doi_hang+0x6e>
    {
        for(int i=0;i<5;i++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	e01f      	b.n	8000b9e <doi_hang+0x68>
        {
            mang[a][i]=mang[so_the][i];
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	4613      	mov	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	18d1      	adds	r1, r2, r3
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	441a      	add	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	440b      	add	r3, r1
 8000b7a:	7819      	ldrb	r1, [r3, #0]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4413      	add	r3, r2
 8000b80:	460a      	mov	r2, r1
 8000b82:	701a      	strb	r2, [r3, #0]
            mang[so_the][i]=0;
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	4613      	mov	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	441a      	add	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4413      	add	r3, r2
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
        for(int i=0;i<5;i++)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	2b04      	cmp	r3, #4
 8000ba2:	dddc      	ble.n	8000b5e <doi_hang+0x28>
        }
    }
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08e      	sub	sp, #56	; 0x38
 8000bb0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb2:	f001 f95f 	bl	8001e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb6:	f000 fc4f 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bba:	f000 fd6d 	bl	8001698 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bbe:	f000 fc91 	bl	80014e4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000bc2:	f000 fcbd 	bl	8001540 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000bc6:	f000 fcf1 	bl	80015ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8000bca:	f000 fe89 	bl	80018e0 <MFRC522_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4889      	ldr	r0, [pc, #548]	; (8000df8 <main+0x24c>)
 8000bd2:	f003 f8bd 	bl	8003d50 <HAL_TIM_PWM_Start>
  lcd_i2c_init(&p_LCD, &hi2c1, 16, 2, 0x27<<1);
 8000bd6:	234e      	movs	r3, #78	; 0x4e
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	2302      	movs	r3, #2
 8000bdc:	2210      	movs	r2, #16
 8000bde:	4987      	ldr	r1, [pc, #540]	; (8000dfc <main+0x250>)
 8000be0:	4887      	ldr	r0, [pc, #540]	; (8000e00 <main+0x254>)
 8000be2:	f7ff fd87 	bl	80006f4 <lcd_i2c_init>
  lcd_clear(&p_LCD);
 8000be6:	4886      	ldr	r0, [pc, #536]	; (8000e00 <main+0x254>)
 8000be8:	f7ff fe93 	bl	8000912 <lcd_clear>
  lcd_set_cursor(&p_LCD, 0, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4883      	ldr	r0, [pc, #524]	; (8000e00 <main+0x254>)
 8000bf2:	f7ff fe4d 	bl	8000890 <lcd_set_cursor>
  lcd_send_string(&p_LCD, "Moi quet the!");
 8000bf6:	4983      	ldr	r1, [pc, #524]	; (8000e04 <main+0x258>)
 8000bf8:	4881      	ldr	r0, [pc, #516]	; (8000e00 <main+0x254>)
 8000bfa:	f7ff fe73 	bl	80008e4 <lcd_send_string>
  for(int i=0;i<5;i++)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c02:	e00b      	b.n	8000c1c <main+0x70>
  {
  	  keycard_main[0][i]=keycard_1[i];
 8000c04:	4a80      	ldr	r2, [pc, #512]	; (8000e08 <main+0x25c>)
 8000c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c08:	4413      	add	r3, r2
 8000c0a:	7819      	ldrb	r1, [r3, #0]
 8000c0c:	4a7f      	ldr	r2, [pc, #508]	; (8000e0c <main+0x260>)
 8000c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c10:	4413      	add	r3, r2
 8000c12:	460a      	mov	r2, r1
 8000c14:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<5;i++)
 8000c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c18:	3301      	adds	r3, #1
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	ddf0      	ble.n	8000c04 <main+0x58>





	  lcd_set_cursor(&p_LCD, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	4876      	ldr	r0, [pc, #472]	; (8000e00 <main+0x254>)
 8000c28:	f7ff fe32 	bl	8000890 <lcd_set_cursor>
	  lcd_send_string(&p_LCD, "Moi quet the!");
 8000c2c:	4975      	ldr	r1, [pc, #468]	; (8000e04 <main+0x258>)
 8000c2e:	4874      	ldr	r0, [pc, #464]	; (8000e00 <main+0x254>)
 8000c30:	f7ff fe58 	bl	80008e4 <lcd_send_string>
	  temp = key_pad();
 8000c34:	f7ff fbd2 	bl	80003dc <key_pad>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4b74      	ldr	r3, [pc, #464]	; (8000e10 <main+0x264>)
 8000c3e:	701a      	strb	r2, [r3, #0]

	  if(temp=='D')
 8000c40:	4b73      	ldr	r3, [pc, #460]	; (8000e10 <main+0x264>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b44      	cmp	r3, #68	; 0x44
 8000c46:	d11f      	bne.n	8000c88 <main+0xdc>
	  {
		  Flash_Write_String(keycard_main[0],_PAGE_127_,5);
 8000c48:	2205      	movs	r2, #5
 8000c4a:	4972      	ldr	r1, [pc, #456]	; (8000e14 <main+0x268>)
 8000c4c:	486f      	ldr	r0, [pc, #444]	; (8000e0c <main+0x260>)
 8000c4e:	f7ff fabb 	bl	80001c8 <Flash_Write_String>
		  Flash_Write_String(keycard_main[1],_PAGE_126_,5);
 8000c52:	2205      	movs	r2, #5
 8000c54:	4970      	ldr	r1, [pc, #448]	; (8000e18 <main+0x26c>)
 8000c56:	4871      	ldr	r0, [pc, #452]	; (8000e1c <main+0x270>)
 8000c58:	f7ff fab6 	bl	80001c8 <Flash_Write_String>
		  Flash_Write_String(keycard_main[2],_PAGE_125_,5);
 8000c5c:	2205      	movs	r2, #5
 8000c5e:	4970      	ldr	r1, [pc, #448]	; (8000e20 <main+0x274>)
 8000c60:	4870      	ldr	r0, [pc, #448]	; (8000e24 <main+0x278>)
 8000c62:	f7ff fab1 	bl	80001c8 <Flash_Write_String>
		  Flash_Write_String(keycard_main[3],_PAGE_124_,5);
 8000c66:	2205      	movs	r2, #5
 8000c68:	496f      	ldr	r1, [pc, #444]	; (8000e28 <main+0x27c>)
 8000c6a:	4870      	ldr	r0, [pc, #448]	; (8000e2c <main+0x280>)
 8000c6c:	f7ff faac 	bl	80001c8 <Flash_Write_String>
		  Flash_Write_String(keycard_main[4],_PAGE_123_,5);
 8000c70:	2205      	movs	r2, #5
 8000c72:	496f      	ldr	r1, [pc, #444]	; (8000e30 <main+0x284>)
 8000c74:	486f      	ldr	r0, [pc, #444]	; (8000e34 <main+0x288>)
 8000c76:	f7ff faa7 	bl	80001c8 <Flash_Write_String>
		  Flash_Write_Uint(so_the,_PAGE_122_);
 8000c7a:	4b6f      	ldr	r3, [pc, #444]	; (8000e38 <main+0x28c>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	496e      	ldr	r1, [pc, #440]	; (8000e3c <main+0x290>)
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fa62 	bl	800014c <Flash_Write_Uint>
	  }

	  if(temp=='0')
 8000c88:	4b61      	ldr	r3, [pc, #388]	; (8000e10 <main+0x264>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b30      	cmp	r3, #48	; 0x30
 8000c8e:	d11f      	bne.n	8000cd0 <main+0x124>
	  {
		  so_the=Flash_Read_Uint(_PAGE_122_);
 8000c90:	486a      	ldr	r0, [pc, #424]	; (8000e3c <main+0x290>)
 8000c92:	f7ff fadb 	bl	800024c <Flash_Read_Uint>
 8000c96:	4603      	mov	r3, r0
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4b67      	ldr	r3, [pc, #412]	; (8000e38 <main+0x28c>)
 8000c9c:	701a      	strb	r2, [r3, #0]
		  Flash_Read_String(keycard_main[0],_PAGE_127_,5);
 8000c9e:	2205      	movs	r2, #5
 8000ca0:	495c      	ldr	r1, [pc, #368]	; (8000e14 <main+0x268>)
 8000ca2:	485a      	ldr	r0, [pc, #360]	; (8000e0c <main+0x260>)
 8000ca4:	f7ff fb04 	bl	80002b0 <Flash_Read_String>
		  Flash_Read_String(keycard_main[1],_PAGE_126_,5);
 8000ca8:	2205      	movs	r2, #5
 8000caa:	495b      	ldr	r1, [pc, #364]	; (8000e18 <main+0x26c>)
 8000cac:	485b      	ldr	r0, [pc, #364]	; (8000e1c <main+0x270>)
 8000cae:	f7ff faff 	bl	80002b0 <Flash_Read_String>
		  Flash_Read_String(keycard_main[2],_PAGE_125_,5);
 8000cb2:	2205      	movs	r2, #5
 8000cb4:	495a      	ldr	r1, [pc, #360]	; (8000e20 <main+0x274>)
 8000cb6:	485b      	ldr	r0, [pc, #364]	; (8000e24 <main+0x278>)
 8000cb8:	f7ff fafa 	bl	80002b0 <Flash_Read_String>
		  Flash_Read_String(keycard_main[3],_PAGE_124_,5);
 8000cbc:	2205      	movs	r2, #5
 8000cbe:	495a      	ldr	r1, [pc, #360]	; (8000e28 <main+0x27c>)
 8000cc0:	485a      	ldr	r0, [pc, #360]	; (8000e2c <main+0x280>)
 8000cc2:	f7ff faf5 	bl	80002b0 <Flash_Read_String>
		  Flash_Read_String(keycard_main[4],_PAGE_123_,5);
 8000cc6:	2205      	movs	r2, #5
 8000cc8:	4959      	ldr	r1, [pc, #356]	; (8000e30 <main+0x284>)
 8000cca:	485a      	ldr	r0, [pc, #360]	; (8000e34 <main+0x288>)
 8000ccc:	f7ff faf0 	bl	80002b0 <Flash_Read_String>
	  }

	  if(temp=='C')
 8000cd0:	4b4f      	ldr	r3, [pc, #316]	; (8000e10 <main+0x264>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b43      	cmp	r3, #67	; 0x43
 8000cd6:	f040 80c9 	bne.w	8000e6c <main+0x2c0>
	  {

		  HAL_Delay(25);
 8000cda:	2019      	movs	r0, #25
 8000cdc:	f001 f92c 	bl	8001f38 <HAL_Delay>

		do
		{
			temp = key_pad();
 8000ce0:	f7ff fb7c 	bl	80003dc <key_pad>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b49      	ldr	r3, [pc, #292]	; (8000e10 <main+0x264>)
 8000cea:	701a      	strb	r2, [r3, #0]
			if(temp != 0XFF && temp!='*'&& temp!='#')
 8000cec:	4b48      	ldr	r3, [pc, #288]	; (8000e10 <main+0x264>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2bff      	cmp	r3, #255	; 0xff
 8000cf2:	d02a      	beq.n	8000d4a <main+0x19e>
 8000cf4:	4b46      	ldr	r3, [pc, #280]	; (8000e10 <main+0x264>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8000cfa:	d026      	beq.n	8000d4a <main+0x19e>
 8000cfc:	4b44      	ldr	r3, [pc, #272]	; (8000e10 <main+0x264>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b23      	cmp	r3, #35	; 0x23
 8000d02:	d022      	beq.n	8000d4a <main+0x19e>
			{
				HAL_Delay(25);
 8000d04:	2019      	movs	r0, #25
 8000d06:	f001 f917 	bl	8001f38 <HAL_Delay>
				keypass[doi++] = temp;
 8000d0a:	4b4d      	ldr	r3, [pc, #308]	; (8000e40 <main+0x294>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	494b      	ldr	r1, [pc, #300]	; (8000e40 <main+0x294>)
 8000d12:	600a      	str	r2, [r1, #0]
 8000d14:	4a3e      	ldr	r2, [pc, #248]	; (8000e10 <main+0x264>)
 8000d16:	7811      	ldrb	r1, [r2, #0]
 8000d18:	4a4a      	ldr	r2, [pc, #296]	; (8000e44 <main+0x298>)
 8000d1a:	54d1      	strb	r1, [r2, r3]
				lcd_set_cursor(&p_LCD, 0, 1);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4837      	ldr	r0, [pc, #220]	; (8000e00 <main+0x254>)
 8000d22:	f7ff fdb5 	bl	8000890 <lcd_set_cursor>
				lcd_send_string(&p_LCD, &temp);
 8000d26:	493a      	ldr	r1, [pc, #232]	; (8000e10 <main+0x264>)
 8000d28:	4835      	ldr	r0, [pc, #212]	; (8000e00 <main+0x254>)
 8000d2a:	f7ff fddb 	bl	80008e4 <lcd_send_string>
				while(temp!= 0xFF) {temp = key_pad();}
 8000d2e:	e005      	b.n	8000d3c <main+0x190>
 8000d30:	f7ff fb54 	bl	80003dc <key_pad>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b35      	ldr	r3, [pc, #212]	; (8000e10 <main+0x264>)
 8000d3a:	701a      	strb	r2, [r3, #0]
 8000d3c:	4b34      	ldr	r3, [pc, #208]	; (8000e10 <main+0x264>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2bff      	cmp	r3, #255	; 0xff
 8000d42:	d1f5      	bne.n	8000d30 <main+0x184>
				HAL_Delay(10);
 8000d44:	200a      	movs	r0, #10
 8000d46:	f001 f8f7 	bl	8001f38 <HAL_Delay>
			}
		}	while(temp!='*'); //while dk dung
 8000d4a:	4b31      	ldr	r3, [pc, #196]	; (8000e10 <main+0x264>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8000d50:	d1c6      	bne.n	8000ce0 <main+0x134>
		while(temp!= 0xFF) {temp = key_pad();}
 8000d52:	e005      	b.n	8000d60 <main+0x1b4>
 8000d54:	f7ff fb42 	bl	80003dc <key_pad>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <main+0x264>)
 8000d5e:	701a      	strb	r2, [r3, #0]
 8000d60:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <main+0x264>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2bff      	cmp	r3, #255	; 0xff
 8000d66:	d1f5      	bne.n	8000d54 <main+0x1a8>
		HAL_Delay(10);
 8000d68:	200a      	movs	r0, #10
 8000d6a:	f001 f8e5 	bl	8001f38 <HAL_Delay>

		doi=0;
 8000d6e:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <main+0x294>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]

		if(CheckPass(keypass,password))
 8000d74:	4934      	ldr	r1, [pc, #208]	; (8000e48 <main+0x29c>)
 8000d76:	4833      	ldr	r0, [pc, #204]	; (8000e44 <main+0x298>)
 8000d78:	f7ff fddf 	bl	800093a <CheckPass>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d074      	beq.n	8000e6c <main+0x2c0>
		{
			do
			{
				temp = key_pad();
 8000d82:	f7ff fb2b 	bl	80003dc <key_pad>
 8000d86:	4603      	mov	r3, r0
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <main+0x264>)
 8000d8c:	701a      	strb	r2, [r3, #0]
				if(temp != 0XFF && temp!='*'&& temp!='#')
 8000d8e:	4b20      	ldr	r3, [pc, #128]	; (8000e10 <main+0x264>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2bff      	cmp	r3, #255	; 0xff
 8000d94:	d02a      	beq.n	8000dec <main+0x240>
 8000d96:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <main+0x264>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8000d9c:	d026      	beq.n	8000dec <main+0x240>
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <main+0x264>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b23      	cmp	r3, #35	; 0x23
 8000da4:	d022      	beq.n	8000dec <main+0x240>
				{
					HAL_Delay(25);
 8000da6:	2019      	movs	r0, #25
 8000da8:	f001 f8c6 	bl	8001f38 <HAL_Delay>
					password[doi++] = temp;
 8000dac:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <main+0x294>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	4923      	ldr	r1, [pc, #140]	; (8000e40 <main+0x294>)
 8000db4:	600a      	str	r2, [r1, #0]
 8000db6:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <main+0x264>)
 8000db8:	7811      	ldrb	r1, [r2, #0]
 8000dba:	4a23      	ldr	r2, [pc, #140]	; (8000e48 <main+0x29c>)
 8000dbc:	54d1      	strb	r1, [r2, r3]
					lcd_set_cursor(&p_LCD, 0, 1);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	480f      	ldr	r0, [pc, #60]	; (8000e00 <main+0x254>)
 8000dc4:	f7ff fd64 	bl	8000890 <lcd_set_cursor>
					lcd_send_string(&p_LCD, &temp);
 8000dc8:	4911      	ldr	r1, [pc, #68]	; (8000e10 <main+0x264>)
 8000dca:	480d      	ldr	r0, [pc, #52]	; (8000e00 <main+0x254>)
 8000dcc:	f7ff fd8a 	bl	80008e4 <lcd_send_string>
					while(temp!= 0xFF) {temp = key_pad();}
 8000dd0:	e005      	b.n	8000dde <main+0x232>
 8000dd2:	f7ff fb03 	bl	80003dc <key_pad>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <main+0x264>)
 8000ddc:	701a      	strb	r2, [r3, #0]
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <main+0x264>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2bff      	cmp	r3, #255	; 0xff
 8000de4:	d1f5      	bne.n	8000dd2 <main+0x226>
					HAL_Delay(10);
 8000de6:	200a      	movs	r0, #10
 8000de8:	f001 f8a6 	bl	8001f38 <HAL_Delay>
				}
			}	while(temp!='*'); //while dk dung
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <main+0x264>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b2a      	cmp	r3, #42	; 0x2a
 8000df2:	d1c6      	bne.n	8000d82 <main+0x1d6>
			while(temp!= 0xFF) {temp = key_pad();}
 8000df4:	e030      	b.n	8000e58 <main+0x2ac>
 8000df6:	bf00      	nop
 8000df8:	200000e0 	.word	0x200000e0
 8000dfc:	20000034 	.word	0x20000034
 8000e00:	20000198 	.word	0x20000198
 8000e04:	08004830 	.word	0x08004830
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	2000015c 	.word	0x2000015c
 8000e10:	2000017c 	.word	0x2000017c
 8000e14:	0801fc02 	.word	0x0801fc02
 8000e18:	0801f802 	.word	0x0801f802
 8000e1c:	20000161 	.word	0x20000161
 8000e20:	0801f402 	.word	0x0801f402
 8000e24:	20000166 	.word	0x20000166
 8000e28:	0801f002 	.word	0x0801f002
 8000e2c:	2000016b 	.word	0x2000016b
 8000e30:	0801ec02 	.word	0x0801ec02
 8000e34:	20000170 	.word	0x20000170
 8000e38:	20000005 	.word	0x20000005
 8000e3c:	0801e802 	.word	0x0801e802
 8000e40:	20000190 	.word	0x20000190
 8000e44:	20000180 	.word	0x20000180
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	f7ff fac6 	bl	80003dc <key_pad>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b94      	ldr	r3, [pc, #592]	; (80010a8 <main+0x4fc>)
 8000e56:	701a      	strb	r2, [r3, #0]
 8000e58:	4b93      	ldr	r3, [pc, #588]	; (80010a8 <main+0x4fc>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2bff      	cmp	r3, #255	; 0xff
 8000e5e:	d1f5      	bne.n	8000e4c <main+0x2a0>
			HAL_Delay(10);
 8000e60:	200a      	movs	r0, #10
 8000e62:	f001 f869 	bl	8001f38 <HAL_Delay>
			doi=0;
 8000e66:	4b91      	ldr	r3, [pc, #580]	; (80010ac <main+0x500>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
		}
	  }

	  if (temp == 'A')
 8000e6c:	4b8e      	ldr	r3, [pc, #568]	; (80010a8 <main+0x4fc>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b41      	cmp	r3, #65	; 0x41
 8000e72:	f040 80d7 	bne.w	8001024 <main+0x478>
	  {
		  HAL_Delay(25);
 8000e76:	2019      	movs	r0, #25
 8000e78:	f001 f85e 	bl	8001f38 <HAL_Delay>
		do
		{
			temp = key_pad();
 8000e7c:	f7ff faae 	bl	80003dc <key_pad>
 8000e80:	4603      	mov	r3, r0
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b88      	ldr	r3, [pc, #544]	; (80010a8 <main+0x4fc>)
 8000e86:	701a      	strb	r2, [r3, #0]
			if(temp != 0XFF && temp!='*'&& temp!='#')
 8000e88:	4b87      	ldr	r3, [pc, #540]	; (80010a8 <main+0x4fc>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2bff      	cmp	r3, #255	; 0xff
 8000e8e:	d02a      	beq.n	8000ee6 <main+0x33a>
 8000e90:	4b85      	ldr	r3, [pc, #532]	; (80010a8 <main+0x4fc>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b2a      	cmp	r3, #42	; 0x2a
 8000e96:	d026      	beq.n	8000ee6 <main+0x33a>
 8000e98:	4b83      	ldr	r3, [pc, #524]	; (80010a8 <main+0x4fc>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b23      	cmp	r3, #35	; 0x23
 8000e9e:	d022      	beq.n	8000ee6 <main+0x33a>
			{
				HAL_Delay(25);
 8000ea0:	2019      	movs	r0, #25
 8000ea2:	f001 f849 	bl	8001f38 <HAL_Delay>
				keypass[them++] = temp;
 8000ea6:	4b82      	ldr	r3, [pc, #520]	; (80010b0 <main+0x504>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	4980      	ldr	r1, [pc, #512]	; (80010b0 <main+0x504>)
 8000eae:	600a      	str	r2, [r1, #0]
 8000eb0:	4a7d      	ldr	r2, [pc, #500]	; (80010a8 <main+0x4fc>)
 8000eb2:	7811      	ldrb	r1, [r2, #0]
 8000eb4:	4a7f      	ldr	r2, [pc, #508]	; (80010b4 <main+0x508>)
 8000eb6:	54d1      	strb	r1, [r2, r3]
				lcd_set_cursor(&p_LCD, 0, 1);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2100      	movs	r1, #0
 8000ebc:	487e      	ldr	r0, [pc, #504]	; (80010b8 <main+0x50c>)
 8000ebe:	f7ff fce7 	bl	8000890 <lcd_set_cursor>
				lcd_send_string(&p_LCD, &temp);
 8000ec2:	4979      	ldr	r1, [pc, #484]	; (80010a8 <main+0x4fc>)
 8000ec4:	487c      	ldr	r0, [pc, #496]	; (80010b8 <main+0x50c>)
 8000ec6:	f7ff fd0d 	bl	80008e4 <lcd_send_string>
				while(temp!= 0xFF) {temp = key_pad();}
 8000eca:	e005      	b.n	8000ed8 <main+0x32c>
 8000ecc:	f7ff fa86 	bl	80003dc <key_pad>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b74      	ldr	r3, [pc, #464]	; (80010a8 <main+0x4fc>)
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	4b73      	ldr	r3, [pc, #460]	; (80010a8 <main+0x4fc>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2bff      	cmp	r3, #255	; 0xff
 8000ede:	d1f5      	bne.n	8000ecc <main+0x320>
				HAL_Delay(10);
 8000ee0:	200a      	movs	r0, #10
 8000ee2:	f001 f829 	bl	8001f38 <HAL_Delay>
			}
		}	while(temp!='*'); //while dk dung
 8000ee6:	4b70      	ldr	r3, [pc, #448]	; (80010a8 <main+0x4fc>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b2a      	cmp	r3, #42	; 0x2a
 8000eec:	d1c6      	bne.n	8000e7c <main+0x2d0>
		while(temp!= 0xFF) {temp = key_pad();}
 8000eee:	e005      	b.n	8000efc <main+0x350>
 8000ef0:	f7ff fa74 	bl	80003dc <key_pad>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b6b      	ldr	r3, [pc, #428]	; (80010a8 <main+0x4fc>)
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	4b6a      	ldr	r3, [pc, #424]	; (80010a8 <main+0x4fc>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2bff      	cmp	r3, #255	; 0xff
 8000f02:	d1f5      	bne.n	8000ef0 <main+0x344>
		HAL_Delay(10);
 8000f04:	200a      	movs	r0, #10
 8000f06:	f001 f817 	bl	8001f38 <HAL_Delay>

		them=0;
 8000f0a:	4b69      	ldr	r3, [pc, #420]	; (80010b0 <main+0x504>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
		if(CheckPass(keypass,password))
 8000f10:	496a      	ldr	r1, [pc, #424]	; (80010bc <main+0x510>)
 8000f12:	4868      	ldr	r0, [pc, #416]	; (80010b4 <main+0x508>)
 8000f14:	f7ff fd11 	bl	800093a <CheckPass>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 8082 	beq.w	8001024 <main+0x478>
		{
			if(so_the!=5)
 8000f20:	4b67      	ldr	r3, [pc, #412]	; (80010c0 <main+0x514>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	d062      	beq.n	8000fee <main+0x442>
			{
				lcd_clear(&p_LCD);
 8000f28:	4863      	ldr	r0, [pc, #396]	; (80010b8 <main+0x50c>)
 8000f2a:	f7ff fcf2 	bl	8000912 <lcd_clear>
				lcd_set_cursor(&p_LCD, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	4861      	ldr	r0, [pc, #388]	; (80010b8 <main+0x50c>)
 8000f34:	f7ff fcac 	bl	8000890 <lcd_set_cursor>
				lcd_send_string(&p_LCD, "The Moi!");
 8000f38:	4962      	ldr	r1, [pc, #392]	; (80010c4 <main+0x518>)
 8000f3a:	485f      	ldr	r0, [pc, #380]	; (80010b8 <main+0x50c>)
 8000f3c:	f7ff fcd2 	bl	80008e4 <lcd_send_string>

				for(int i=0;i<5;)
 8000f40:	2300      	movs	r3, #0
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f44:	e02e      	b.n	8000fa4 <main+0x3f8>
				{
					status_1 = MFRC522_Request(PICC_REQIDL, str_1);	//MFRC522_Request(0x26, str)
 8000f46:	4960      	ldr	r1, [pc, #384]	; (80010c8 <main+0x51c>)
 8000f48:	2026      	movs	r0, #38	; 0x26
 8000f4a:	f000 fdc0 	bl	8001ace <MFRC522_Request>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b5e      	ldr	r3, [pc, #376]	; (80010cc <main+0x520>)
 8000f54:	701a      	strb	r2, [r3, #0]
					status_1 = MFRC522_Anticoll(str_1);//Take a collision, look up 5 bytes
 8000f56:	485c      	ldr	r0, [pc, #368]	; (80010c8 <main+0x51c>)
 8000f58:	f000 fdde 	bl	8001b18 <MFRC522_Anticoll>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b5a      	ldr	r3, [pc, #360]	; (80010cc <main+0x520>)
 8000f62:	701a      	strb	r2, [r3, #0]
					if(status_1==0)
 8000f64:	4b59      	ldr	r3, [pc, #356]	; (80010cc <main+0x520>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d11b      	bne.n	8000fa4 <main+0x3f8>
					{
						serNum_1[i]=str_1[i];
 8000f6c:	4a56      	ldr	r2, [pc, #344]	; (80010c8 <main+0x51c>)
 8000f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f70:	4413      	add	r3, r2
 8000f72:	7819      	ldrb	r1, [r3, #0]
 8000f74:	4a56      	ldr	r2, [pc, #344]	; (80010d0 <main+0x524>)
 8000f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f78:	4413      	add	r3, r2
 8000f7a:	460a      	mov	r2, r1
 8000f7c:	701a      	strb	r2, [r3, #0]
						keycard_main[so_the][i]=serNum_1[i];
 8000f7e:	4b50      	ldr	r3, [pc, #320]	; (80010c0 <main+0x514>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	4619      	mov	r1, r3
 8000f84:	4a52      	ldr	r2, [pc, #328]	; (80010d0 <main+0x524>)
 8000f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f88:	4413      	add	r3, r2
 8000f8a:	7818      	ldrb	r0, [r3, #0]
 8000f8c:	4a51      	ldr	r2, [pc, #324]	; (80010d4 <main+0x528>)
 8000f8e:	460b      	mov	r3, r1
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	440b      	add	r3, r1
 8000f94:	441a      	add	r2, r3
 8000f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f98:	4413      	add	r3, r2
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	701a      	strb	r2, [r3, #0]
						i++;
 8000f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
				for(int i=0;i<5;)
 8000fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	ddcd      	ble.n	8000f46 <main+0x39a>
					}
				}

				so_the++;
 8000faa:	4b45      	ldr	r3, [pc, #276]	; (80010c0 <main+0x514>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <main+0x514>)
 8000fb4:	701a      	strb	r2, [r3, #0]
				lcd_clear(&p_LCD);
 8000fb6:	4840      	ldr	r0, [pc, #256]	; (80010b8 <main+0x50c>)
 8000fb8:	f7ff fcab 	bl	8000912 <lcd_clear>
				lcd_set_cursor(&p_LCD, 0, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	483d      	ldr	r0, [pc, #244]	; (80010b8 <main+0x50c>)
 8000fc2:	f7ff fc65 	bl	8000890 <lcd_set_cursor>
				lcd_send_string(&p_LCD, "Thanh cong!");
 8000fc6:	4944      	ldr	r1, [pc, #272]	; (80010d8 <main+0x52c>)
 8000fc8:	483b      	ldr	r0, [pc, #236]	; (80010b8 <main+0x50c>)
 8000fca:	f7ff fc8b 	bl	80008e4 <lcd_send_string>
				for(int x=500000;x>0;x--);
 8000fce:	4b43      	ldr	r3, [pc, #268]	; (80010dc <main+0x530>)
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd2:	e002      	b.n	8000fda <main+0x42e>
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	dcf9      	bgt.n	8000fd4 <main+0x428>
				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 8000fe0:	4b3f      	ldr	r3, [pc, #252]	; (80010e0 <main+0x534>)
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	615a      	str	r2, [r3, #20]
				lcd_clear(&p_LCD);
 8000fe6:	4834      	ldr	r0, [pc, #208]	; (80010b8 <main+0x50c>)
 8000fe8:	f7ff fc93 	bl	8000912 <lcd_clear>
 8000fec:	e01a      	b.n	8001024 <main+0x478>
			}
			else
			{
				lcd_clear(&p_LCD);
 8000fee:	4832      	ldr	r0, [pc, #200]	; (80010b8 <main+0x50c>)
 8000ff0:	f7ff fc8f 	bl	8000912 <lcd_clear>
				lcd_set_cursor(&p_LCD, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	482f      	ldr	r0, [pc, #188]	; (80010b8 <main+0x50c>)
 8000ffa:	f7ff fc49 	bl	8000890 <lcd_set_cursor>
				lcd_send_string(&p_LCD, "Hay xoa bot!");
 8000ffe:	4939      	ldr	r1, [pc, #228]	; (80010e4 <main+0x538>)
 8001000:	482d      	ldr	r0, [pc, #180]	; (80010b8 <main+0x50c>)
 8001002:	f7ff fc6f 	bl	80008e4 <lcd_send_string>
				for(int x=500000;x>0;x--);
 8001006:	4b35      	ldr	r3, [pc, #212]	; (80010dc <main+0x530>)
 8001008:	623b      	str	r3, [r7, #32]
 800100a:	e002      	b.n	8001012 <main+0x466>
 800100c:	6a3b      	ldr	r3, [r7, #32]
 800100e:	3b01      	subs	r3, #1
 8001010:	623b      	str	r3, [r7, #32]
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	2b00      	cmp	r3, #0
 8001016:	dcf9      	bgt.n	800100c <main+0x460>
				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 8001018:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <main+0x534>)
 800101a:	2202      	movs	r2, #2
 800101c:	615a      	str	r2, [r3, #20]
				lcd_clear(&p_LCD);
 800101e:	4826      	ldr	r0, [pc, #152]	; (80010b8 <main+0x50c>)
 8001020:	f7ff fc77 	bl	8000912 <lcd_clear>
			}

		}
	  }
	  if (temp == 'B')
 8001024:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <main+0x4fc>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b42      	cmp	r3, #66	; 0x42
 800102a:	f040 8112 	bne.w	8001252 <main+0x6a6>
	  {
		  HAL_Delay(25);
 800102e:	2019      	movs	r0, #25
 8001030:	f000 ff82 	bl	8001f38 <HAL_Delay>
		do
		{
			temp = key_pad();
 8001034:	f7ff f9d2 	bl	80003dc <key_pad>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <main+0x4fc>)
 800103e:	701a      	strb	r2, [r3, #0]
			if(temp != 0XFF && temp!='*'&& temp!='#')
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <main+0x4fc>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2bff      	cmp	r3, #255	; 0xff
 8001046:	d02a      	beq.n	800109e <main+0x4f2>
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <main+0x4fc>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b2a      	cmp	r3, #42	; 0x2a
 800104e:	d026      	beq.n	800109e <main+0x4f2>
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <main+0x4fc>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b23      	cmp	r3, #35	; 0x23
 8001056:	d022      	beq.n	800109e <main+0x4f2>
			{
				HAL_Delay(25);
 8001058:	2019      	movs	r0, #25
 800105a:	f000 ff6d 	bl	8001f38 <HAL_Delay>
				keypass[xoa++] = temp;
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <main+0x53c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	4920      	ldr	r1, [pc, #128]	; (80010e8 <main+0x53c>)
 8001066:	600a      	str	r2, [r1, #0]
 8001068:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <main+0x4fc>)
 800106a:	7811      	ldrb	r1, [r2, #0]
 800106c:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <main+0x508>)
 800106e:	54d1      	strb	r1, [r2, r3]
				lcd_set_cursor(&p_LCD, 0, 1);
 8001070:	2201      	movs	r2, #1
 8001072:	2100      	movs	r1, #0
 8001074:	4810      	ldr	r0, [pc, #64]	; (80010b8 <main+0x50c>)
 8001076:	f7ff fc0b 	bl	8000890 <lcd_set_cursor>
				lcd_send_string(&p_LCD, &temp);
 800107a:	490b      	ldr	r1, [pc, #44]	; (80010a8 <main+0x4fc>)
 800107c:	480e      	ldr	r0, [pc, #56]	; (80010b8 <main+0x50c>)
 800107e:	f7ff fc31 	bl	80008e4 <lcd_send_string>
				while(temp!= 0xFF) {temp = key_pad();}
 8001082:	e005      	b.n	8001090 <main+0x4e4>
 8001084:	f7ff f9aa 	bl	80003dc <key_pad>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <main+0x4fc>)
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <main+0x4fc>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2bff      	cmp	r3, #255	; 0xff
 8001096:	d1f5      	bne.n	8001084 <main+0x4d8>
				HAL_Delay(10);
 8001098:	200a      	movs	r0, #10
 800109a:	f000 ff4d 	bl	8001f38 <HAL_Delay>
			}
		}	while(temp!='*'); //while dk dung
 800109e:	4b02      	ldr	r3, [pc, #8]	; (80010a8 <main+0x4fc>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b2a      	cmp	r3, #42	; 0x2a
 80010a4:	d1c6      	bne.n	8001034 <main+0x488>
		while(temp!= 0xFF) {temp = key_pad();}
 80010a6:	e027      	b.n	80010f8 <main+0x54c>
 80010a8:	2000017c 	.word	0x2000017c
 80010ac:	20000190 	.word	0x20000190
 80010b0:	20000188 	.word	0x20000188
 80010b4:	20000180 	.word	0x20000180
 80010b8:	20000198 	.word	0x20000198
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20000005 	.word	0x20000005
 80010c4:	08004840 	.word	0x08004840
 80010c8:	20000144 	.word	0x20000144
 80010cc:	20000141 	.word	0x20000141
 80010d0:	20000154 	.word	0x20000154
 80010d4:	2000015c 	.word	0x2000015c
 80010d8:	0800484c 	.word	0x0800484c
 80010dc:	0007a120 	.word	0x0007a120
 80010e0:	40010400 	.word	0x40010400
 80010e4:	08004858 	.word	0x08004858
 80010e8:	2000018c 	.word	0x2000018c
 80010ec:	f7ff f976 	bl	80003dc <key_pad>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b85      	ldr	r3, [pc, #532]	; (800130c <main+0x760>)
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	4b84      	ldr	r3, [pc, #528]	; (800130c <main+0x760>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2bff      	cmp	r3, #255	; 0xff
 80010fe:	d1f5      	bne.n	80010ec <main+0x540>
		HAL_Delay(10);
 8001100:	200a      	movs	r0, #10
 8001102:	f000 ff19 	bl	8001f38 <HAL_Delay>

		xoa=0;
 8001106:	4b82      	ldr	r3, [pc, #520]	; (8001310 <main+0x764>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
		if(CheckPass(keypass,password))
 800110c:	4981      	ldr	r1, [pc, #516]	; (8001314 <main+0x768>)
 800110e:	4882      	ldr	r0, [pc, #520]	; (8001318 <main+0x76c>)
 8001110:	f7ff fc13 	bl	800093a <CheckPass>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 809b 	beq.w	8001252 <main+0x6a6>
		{
			lcd_clear(&p_LCD);
 800111c:	487f      	ldr	r0, [pc, #508]	; (800131c <main+0x770>)
 800111e:	f7ff fbf8 	bl	8000912 <lcd_clear>
			lcd_set_cursor(&p_LCD, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	487d      	ldr	r0, [pc, #500]	; (800131c <main+0x770>)
 8001128:	f7ff fbb2 	bl	8000890 <lcd_set_cursor>
			lcd_send_string(&p_LCD, "Xoa the!");
 800112c:	497c      	ldr	r1, [pc, #496]	; (8001320 <main+0x774>)
 800112e:	487b      	ldr	r0, [pc, #492]	; (800131c <main+0x770>)
 8001130:	f7ff fbd8 	bl	80008e4 <lcd_send_string>

			for(int i=0;i<5;)
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	e01e      	b.n	8001178 <main+0x5cc>
			{
				status_1 = MFRC522_Request(PICC_REQIDL, str_1);	//MFRC522_Request(0x26, str)
 800113a:	497a      	ldr	r1, [pc, #488]	; (8001324 <main+0x778>)
 800113c:	2026      	movs	r0, #38	; 0x26
 800113e:	f000 fcc6 	bl	8001ace <MFRC522_Request>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	4b78      	ldr	r3, [pc, #480]	; (8001328 <main+0x77c>)
 8001148:	701a      	strb	r2, [r3, #0]
				status_1 = MFRC522_Anticoll(str_1);//Take a collision, look up 5 bytes
 800114a:	4876      	ldr	r0, [pc, #472]	; (8001324 <main+0x778>)
 800114c:	f000 fce4 	bl	8001b18 <MFRC522_Anticoll>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	4b74      	ldr	r3, [pc, #464]	; (8001328 <main+0x77c>)
 8001156:	701a      	strb	r2, [r3, #0]
				if(status_1==0)
 8001158:	4b73      	ldr	r3, [pc, #460]	; (8001328 <main+0x77c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10b      	bne.n	8001178 <main+0x5cc>
				{
					serNum_1[i]=str_1[i];
 8001160:	4a70      	ldr	r2, [pc, #448]	; (8001324 <main+0x778>)
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	4413      	add	r3, r2
 8001166:	7819      	ldrb	r1, [r3, #0]
 8001168:	4a70      	ldr	r2, [pc, #448]	; (800132c <main+0x780>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	4413      	add	r3, r2
 800116e:	460a      	mov	r2, r1
 8001170:	701a      	strb	r2, [r3, #0]
					i++;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3301      	adds	r3, #1
 8001176:	61fb      	str	r3, [r7, #28]
			for(int i=0;i<5;)
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	2b04      	cmp	r3, #4
 800117c:	dddd      	ble.n	800113a <main+0x58e>
//				{
//					if(serNum_1[i]==keycard_main[t][i])
//						keycard_main[t][i]=0;
//				}
			}
			for(int i=0;i<5;i++)
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
 8001182:	e039      	b.n	80011f8 <main+0x64c>
			{
				for(int t=0;t<5;t++)
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	e016      	b.n	80011b8 <main+0x60c>
				{
					if(serNum_1[t]==keycard_main[i][t])
 800118a:	4a68      	ldr	r2, [pc, #416]	; (800132c <main+0x780>)
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	4413      	add	r3, r2
 8001190:	7819      	ldrb	r1, [r3, #0]
 8001192:	4867      	ldr	r0, [pc, #412]	; (8001330 <main+0x784>)
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	18c2      	adds	r2, r0, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	4413      	add	r3, r2
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4299      	cmp	r1, r3
 80011a6:	d104      	bne.n	80011b2 <main+0x606>
						dem_so_trung++;
 80011a8:	4b62      	ldr	r3, [pc, #392]	; (8001334 <main+0x788>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	4a61      	ldr	r2, [pc, #388]	; (8001334 <main+0x788>)
 80011b0:	6013      	str	r3, [r2, #0]
				for(int t=0;t<5;t++)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3301      	adds	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	dde5      	ble.n	800118a <main+0x5de>
				}
				if(dem_so_trung==5)
 80011be:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <main+0x788>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b05      	cmp	r3, #5
 80011c4:	d112      	bne.n	80011ec <main+0x640>
				{
					for(int m=0; m<5;m++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	e00c      	b.n	80011e6 <main+0x63a>
					{
						keycard_main[i][m]=0;
 80011cc:	4958      	ldr	r1, [pc, #352]	; (8001330 <main+0x784>)
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	18ca      	adds	r2, r1, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4413      	add	r3, r2
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
					for(int m=0; m<5;m++)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	3301      	adds	r3, #1
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	ddef      	ble.n	80011cc <main+0x620>
					}
				}
				dem_so_trung=0;
 80011ec:	4b51      	ldr	r3, [pc, #324]	; (8001334 <main+0x788>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
			for(int i=0;i<5;i++)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61bb      	str	r3, [r7, #24]
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	ddc2      	ble.n	8001184 <main+0x5d8>
			}
			so_the--;
 80011fe:	4b4e      	ldr	r3, [pc, #312]	; (8001338 <main+0x78c>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	3b01      	subs	r3, #1
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4b4c      	ldr	r3, [pc, #304]	; (8001338 <main+0x78c>)
 8001208:	701a      	strb	r2, [r3, #0]
			doi_hang(keycard_main,so_the);
 800120a:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <main+0x78c>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	4619      	mov	r1, r3
 8001210:	4847      	ldr	r0, [pc, #284]	; (8001330 <main+0x784>)
 8001212:	f7ff fc90 	bl	8000b36 <doi_hang>
			lcd_clear(&p_LCD);
 8001216:	4841      	ldr	r0, [pc, #260]	; (800131c <main+0x770>)
 8001218:	f7ff fb7b 	bl	8000912 <lcd_clear>
			lcd_set_cursor(&p_LCD, 0, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2100      	movs	r1, #0
 8001220:	483e      	ldr	r0, [pc, #248]	; (800131c <main+0x770>)
 8001222:	f7ff fb35 	bl	8000890 <lcd_set_cursor>
			lcd_send_string(&p_LCD, "Da xoa!");
 8001226:	4945      	ldr	r1, [pc, #276]	; (800133c <main+0x790>)
 8001228:	483c      	ldr	r0, [pc, #240]	; (800131c <main+0x770>)
 800122a:	f7ff fb5b 	bl	80008e4 <lcd_send_string>
			for(int x=500000;x>0;x--);
 800122e:	4b44      	ldr	r3, [pc, #272]	; (8001340 <main+0x794>)
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	e002      	b.n	800123a <main+0x68e>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3b01      	subs	r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2b00      	cmp	r3, #0
 800123e:	dcf9      	bgt.n	8001234 <main+0x688>
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);
 8001240:	4b40      	ldr	r3, [pc, #256]	; (8001344 <main+0x798>)
 8001242:	2204      	movs	r2, #4
 8001244:	615a      	str	r2, [r3, #20]
			lcd_clear(&p_LCD);
 8001246:	4835      	ldr	r0, [pc, #212]	; (800131c <main+0x770>)
 8001248:	f7ff fb63 	bl	8000912 <lcd_clear>
			HAL_Delay(50);
 800124c:	2032      	movs	r0, #50	; 0x32
 800124e:	f000 fe73 	bl	8001f38 <HAL_Delay>
		}
	  }


	  status = MFRC522_Request(PICC_REQIDL, str);	//MFRC522_Request(0x26, str)
 8001252:	493d      	ldr	r1, [pc, #244]	; (8001348 <main+0x79c>)
 8001254:	2026      	movs	r0, #38	; 0x26
 8001256:	f000 fc3a 	bl	8001ace <MFRC522_Request>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	4b3b      	ldr	r3, [pc, #236]	; (800134c <main+0x7a0>)
 8001260:	701a      	strb	r2, [r3, #0]
	  status = MFRC522_Anticoll(str);//Take a collision, look up 5 bytes
 8001262:	4839      	ldr	r0, [pc, #228]	; (8001348 <main+0x79c>)
 8001264:	f000 fc58 	bl	8001b18 <MFRC522_Anticoll>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b37      	ldr	r3, [pc, #220]	; (800134c <main+0x7a0>)
 800126e:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<5;i++)
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	e00f      	b.n	8001296 <main+0x6ea>
	  {
	  	if(status==0)
 8001276:	4b35      	ldr	r3, [pc, #212]	; (800134c <main+0x7a0>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d108      	bne.n	8001290 <main+0x6e4>
	  	{
	  		serNum[i]=str[i];
 800127e:	4a32      	ldr	r2, [pc, #200]	; (8001348 <main+0x79c>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4413      	add	r3, r2
 8001284:	7819      	ldrb	r1, [r3, #0]
 8001286:	4a32      	ldr	r2, [pc, #200]	; (8001350 <main+0x7a4>)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4413      	add	r3, r2
 800128c:	460a      	mov	r2, r1
 800128e:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<5;i++)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	3301      	adds	r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b04      	cmp	r3, #4
 800129a:	ddec      	ble.n	8001276 <main+0x6ca>
	  	}
	  }

	  for(int i=0;i<5;i++)
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	e030      	b.n	8001304 <main+0x758>
	  {
		  for(int t=0;t<5;t++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	e020      	b.n	80012ea <main+0x73e>
		  {
			  if((serNum[t]==keycard_main[i][t])&&(status==0))
 80012a8:	4a29      	ldr	r2, [pc, #164]	; (8001350 <main+0x7a4>)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	7819      	ldrb	r1, [r3, #0]
 80012b0:	481f      	ldr	r0, [pc, #124]	; (8001330 <main+0x784>)
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	18c2      	adds	r2, r0, r3
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	4299      	cmp	r1, r3
 80012c4:	d109      	bne.n	80012da <main+0x72e>
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <main+0x7a0>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d105      	bne.n	80012da <main+0x72e>
				  dem++;
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <main+0x7a8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	3301      	adds	r3, #1
 80012d4:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <main+0x7a8>)
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	e004      	b.n	80012e4 <main+0x738>
			  else
				  dem--;
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <main+0x7a8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	3b01      	subs	r3, #1
 80012e0:	4a1c      	ldr	r2, [pc, #112]	; (8001354 <main+0x7a8>)
 80012e2:	6013      	str	r3, [r2, #0]
		  for(int t=0;t<5;t++)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	dddb      	ble.n	80012a8 <main+0x6fc>
		  }
		  if(dem==5)
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <main+0x7a8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b05      	cmp	r3, #5
 80012f6:	d02f      	beq.n	8001358 <main+0x7ac>
			  break;
		  dem=0;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <main+0x7a8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
	  for(int i=0;i<5;i++)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3301      	adds	r3, #1
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b04      	cmp	r3, #4
 8001308:	ddcb      	ble.n	80012a2 <main+0x6f6>
 800130a:	e026      	b.n	800135a <main+0x7ae>
 800130c:	2000017c 	.word	0x2000017c
 8001310:	2000018c 	.word	0x2000018c
 8001314:	20000008 	.word	0x20000008
 8001318:	20000180 	.word	0x20000180
 800131c:	20000198 	.word	0x20000198
 8001320:	08004868 	.word	0x08004868
 8001324:	20000144 	.word	0x20000144
 8001328:	20000141 	.word	0x20000141
 800132c:	20000154 	.word	0x20000154
 8001330:	2000015c 	.word	0x2000015c
 8001334:	20000194 	.word	0x20000194
 8001338:	20000005 	.word	0x20000005
 800133c:	08004874 	.word	0x08004874
 8001340:	0007a120 	.word	0x0007a120
 8001344:	40010400 	.word	0x40010400
 8001348:	2000012c 	.word	0x2000012c
 800134c:	20000128 	.word	0x20000128
 8001350:	2000013c 	.word	0x2000013c
 8001354:	20000178 	.word	0x20000178
			  break;
 8001358:	bf00      	nop
	  }
	  if((dem==5))
 800135a:	4b37      	ldr	r3, [pc, #220]	; (8001438 <main+0x88c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b05      	cmp	r3, #5
 8001360:	d12a      	bne.n	80013b8 <main+0x80c>
	  {
	  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,1);
 8001362:	2201      	movs	r2, #1
 8001364:	2101      	movs	r1, #1
 8001366:	4835      	ldr	r0, [pc, #212]	; (800143c <main+0x890>)
 8001368:	f001 f8bf 	bl	80024ea <HAL_GPIO_WritePin>
	  	lcd_set_cursor(&p_LCD, 0, 1);
 800136c:	2201      	movs	r2, #1
 800136e:	2100      	movs	r1, #0
 8001370:	4833      	ldr	r0, [pc, #204]	; (8001440 <main+0x894>)
 8001372:	f7ff fa8d 	bl	8000890 <lcd_set_cursor>
	  	lcd_send_string(&p_LCD, "Moi vao!");
 8001376:	4933      	ldr	r1, [pc, #204]	; (8001444 <main+0x898>)
 8001378:	4831      	ldr	r0, [pc, #196]	; (8001440 <main+0x894>)
 800137a:	f7ff fab3 	bl	80008e4 <lcd_send_string>
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,30);
 800137e:	4b32      	ldr	r3, [pc, #200]	; (8001448 <main+0x89c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	221e      	movs	r2, #30
 8001384:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(1000);
 8001386:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800138a:	f000 fdd5 	bl	8001f38 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,100);
 800138e:	4b2e      	ldr	r3, [pc, #184]	; (8001448 <main+0x89c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2264      	movs	r2, #100	; 0x64
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(1000);
 8001396:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800139a:	f000 fdcd 	bl	8001f38 <HAL_Delay>
	  	dem=0;
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <main+0x88c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
	  	status=2;
 80013a4:	4b29      	ldr	r3, [pc, #164]	; (800144c <main+0x8a0>)
 80013a6:	2202      	movs	r2, #2
 80013a8:	701a      	strb	r2, [r3, #0]
	  	HAL_Delay(1000);
 80013aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ae:	f000 fdc3 	bl	8001f38 <HAL_Delay>
	  	lcd_clear(&p_LCD);
 80013b2:	4823      	ldr	r0, [pc, #140]	; (8001440 <main+0x894>)
 80013b4:	f7ff faad 	bl	8000912 <lcd_clear>
	  	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);
	  }
	  if((dem!=5)&&(status==MI_OK))
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <main+0x88c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d016      	beq.n	80013ee <main+0x842>
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <main+0x8a0>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d112      	bne.n	80013ee <main+0x842>
	  {
	  	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);
	  	lcd_set_cursor(&p_LCD, 0, 1);
 80013c8:	2201      	movs	r2, #1
 80013ca:	2100      	movs	r1, #0
 80013cc:	481c      	ldr	r0, [pc, #112]	; (8001440 <main+0x894>)
 80013ce:	f7ff fa5f 	bl	8000890 <lcd_set_cursor>
	  	lcd_send_string(&p_LCD, "Thu lai!");
 80013d2:	491f      	ldr	r1, [pc, #124]	; (8001450 <main+0x8a4>)
 80013d4:	481a      	ldr	r0, [pc, #104]	; (8001440 <main+0x894>)
 80013d6:	f7ff fa85 	bl	80008e4 <lcd_send_string>
	  	HAL_Delay(1000);
 80013da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013de:	f000 fdab 	bl	8001f38 <HAL_Delay>
	  	lcd_clear(&p_LCD);
 80013e2:	4817      	ldr	r0, [pc, #92]	; (8001440 <main+0x894>)
 80013e4:	f7ff fa95 	bl	8000912 <lcd_clear>
	  	dem=0;
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <main+0x88c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
	  }




		if(temp != 0xFF)
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <main+0x8a8>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2bff      	cmp	r3, #255	; 0xff
 80013f4:	f43f ac15 	beq.w	8000c22 <main+0x76>
		{
			lcd_set_cursor(&p_LCD, 0, 1);
 80013f8:	2201      	movs	r2, #1
 80013fa:	2100      	movs	r1, #0
 80013fc:	4810      	ldr	r0, [pc, #64]	; (8001440 <main+0x894>)
 80013fe:	f7ff fa47 	bl	8000890 <lcd_set_cursor>
			lcd_send_string(&p_LCD, &temp);
 8001402:	4914      	ldr	r1, [pc, #80]	; (8001454 <main+0x8a8>)
 8001404:	480e      	ldr	r0, [pc, #56]	; (8001440 <main+0x894>)
 8001406:	f7ff fa6d 	bl	80008e4 <lcd_send_string>
			HAL_Delay(25);
 800140a:	2019      	movs	r0, #25
 800140c:	f000 fd94 	bl	8001f38 <HAL_Delay>
			if(temp == '#')
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <main+0x8a8>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b23      	cmp	r3, #35	; 0x23
 8001416:	d108      	bne.n	800142a <main+0x87e>
			{
				EnterPassWord();
 8001418:	f7ff fab0 	bl	800097c <EnterPassWord>
			}
			while(temp!= 0xFF) {temp = key_pad();}
 800141c:	e005      	b.n	800142a <main+0x87e>
 800141e:	f7fe ffdd 	bl	80003dc <key_pad>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <main+0x8a8>)
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <main+0x8a8>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2bff      	cmp	r3, #255	; 0xff
 8001430:	d1f5      	bne.n	800141e <main+0x872>
	  lcd_set_cursor(&p_LCD, 0, 0);
 8001432:	f7ff bbf6 	b.w	8000c22 <main+0x76>
 8001436:	bf00      	nop
 8001438:	20000178 	.word	0x20000178
 800143c:	40010800 	.word	0x40010800
 8001440:	20000198 	.word	0x20000198
 8001444:	0800487c 	.word	0x0800487c
 8001448:	200000e0 	.word	0x200000e0
 800144c:	20000128 	.word	0x20000128
 8001450:	08004888 	.word	0x08004888
 8001454:	2000017c 	.word	0x2000017c

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b090      	sub	sp, #64	; 0x40
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0318 	add.w	r3, r7, #24
 8001462:	2228      	movs	r2, #40	; 0x28
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f003 f9a0 	bl	80047ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800147a:	2301      	movs	r3, #1
 800147c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800147e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001482:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001488:	2301      	movs	r3, #1
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800148c:	2302      	movs	r3, #2
 800148e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001494:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001496:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800149a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149c:	f107 0318 	add.w	r3, r7, #24
 80014a0:	4618      	mov	r0, r3
 80014a2:	f001 fcd7 	bl	8002e54 <HAL_RCC_OscConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014ac:	f000 f960 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b0:	230f      	movs	r3, #15
 80014b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b4:	2302      	movs	r3, #2
 80014b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2102      	movs	r1, #2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 ff44 	bl	8003358 <HAL_RCC_ClockConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014d6:	f000 f94b 	bl	8001770 <Error_Handler>
  }
}
 80014da:	bf00      	nop
 80014dc:	3740      	adds	r7, #64	; 0x40
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_I2C1_Init+0x50>)
 80014ea:	4a13      	ldr	r2, [pc, #76]	; (8001538 <MX_I2C1_Init+0x54>)
 80014ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_I2C1_Init+0x50>)
 80014f0:	4a12      	ldr	r2, [pc, #72]	; (800153c <MX_I2C1_Init+0x58>)
 80014f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_I2C1_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_I2C1_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_I2C1_Init+0x50>)
 8001502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001506:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <MX_I2C1_Init+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_I2C1_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <MX_I2C1_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_I2C1_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_I2C1_Init+0x50>)
 8001522:	f000 fffb 	bl	800251c <HAL_I2C_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800152c:	f000 f920 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000034 	.word	0x20000034
 8001538:	40005400 	.word	0x40005400
 800153c:	000186a0 	.word	0x000186a0

08001540 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <MX_SPI1_Init+0x64>)
 8001546:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <MX_SPI1_Init+0x68>)
 8001548:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <MX_SPI1_Init+0x64>)
 800154c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001550:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MX_SPI1_Init+0x64>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <MX_SPI1_Init+0x64>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_SPI1_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_SPI1_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_SPI1_Init+0x64>)
 800156c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001570:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_SPI1_Init+0x64>)
 8001574:	2218      	movs	r2, #24
 8001576:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <MX_SPI1_Init+0x64>)
 800157a:	2200      	movs	r2, #0
 800157c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_SPI1_Init+0x64>)
 8001580:	2200      	movs	r2, #0
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <MX_SPI1_Init+0x64>)
 8001586:	2200      	movs	r2, #0
 8001588:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <MX_SPI1_Init+0x64>)
 800158c:	220a      	movs	r2, #10
 800158e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <MX_SPI1_Init+0x64>)
 8001592:	f002 f85b 	bl	800364c <HAL_SPI_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800159c:	f000 f8e8 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000088 	.word	0x20000088
 80015a8:	40013000 	.word	0x40013000

080015ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08e      	sub	sp, #56	; 0x38
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	f107 0320 	add.w	r3, r7, #32
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015dc:	4b2d      	ldr	r3, [pc, #180]	; (8001694 <MX_TIM2_Init+0xe8>)
 80015de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1439;
 80015e4:	4b2b      	ldr	r3, [pc, #172]	; (8001694 <MX_TIM2_Init+0xe8>)
 80015e6:	f240 529f 	movw	r2, #1439	; 0x59f
 80015ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b29      	ldr	r3, [pc, #164]	; (8001694 <MX_TIM2_Init+0xe8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80015f2:	4b28      	ldr	r3, [pc, #160]	; (8001694 <MX_TIM2_Init+0xe8>)
 80015f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fa:	4b26      	ldr	r3, [pc, #152]	; (8001694 <MX_TIM2_Init+0xe8>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001600:	4b24      	ldr	r3, [pc, #144]	; (8001694 <MX_TIM2_Init+0xe8>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001606:	4823      	ldr	r0, [pc, #140]	; (8001694 <MX_TIM2_Init+0xe8>)
 8001608:	f002 fafa 	bl	8003c00 <HAL_TIM_Base_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001612:	f000 f8ad 	bl	8001770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800161c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001620:	4619      	mov	r1, r3
 8001622:	481c      	ldr	r0, [pc, #112]	; (8001694 <MX_TIM2_Init+0xe8>)
 8001624:	f002 fcf8 	bl	8004018 <HAL_TIM_ConfigClockSource>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800162e:	f000 f89f 	bl	8001770 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001632:	4818      	ldr	r0, [pc, #96]	; (8001694 <MX_TIM2_Init+0xe8>)
 8001634:	f002 fb33 	bl	8003c9e <HAL_TIM_PWM_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800163e:	f000 f897 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800164a:	f107 0320 	add.w	r3, r7, #32
 800164e:	4619      	mov	r1, r3
 8001650:	4810      	ldr	r0, [pc, #64]	; (8001694 <MX_TIM2_Init+0xe8>)
 8001652:	f003 f84d 	bl	80046f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800165c:	f000 f888 	bl	8001770 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001660:	2360      	movs	r3, #96	; 0x60
 8001662:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	4619      	mov	r1, r3
 8001676:	4807      	ldr	r0, [pc, #28]	; (8001694 <MX_TIM2_Init+0xe8>)
 8001678:	f002 fc0c 	bl	8003e94 <HAL_TIM_PWM_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001682:	f000 f875 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001686:	4803      	ldr	r0, [pc, #12]	; (8001694 <MX_TIM2_Init+0xe8>)
 8001688:	f000 fb5a 	bl	8001d40 <HAL_TIM_MspPostInit>

}
 800168c:	bf00      	nop
 800168e:	3738      	adds	r7, #56	; 0x38
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200000e0 	.word	0x200000e0

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 0310 	add.w	r3, r7, #16
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ac:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <MX_GPIO_Init+0xcc>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a2c      	ldr	r2, [pc, #176]	; (8001764 <MX_GPIO_Init+0xcc>)
 80016b2:	f043 0320 	orr.w	r3, r3, #32
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <MX_GPIO_Init+0xcc>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0320 	and.w	r3, r3, #32
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <MX_GPIO_Init+0xcc>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a26      	ldr	r2, [pc, #152]	; (8001764 <MX_GPIO_Init+0xcc>)
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b24      	ldr	r3, [pc, #144]	; (8001764 <MX_GPIO_Init+0xcc>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016dc:	4b21      	ldr	r3, [pc, #132]	; (8001764 <MX_GPIO_Init+0xcc>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a20      	ldr	r2, [pc, #128]	; (8001764 <MX_GPIO_Init+0xcc>)
 80016e2:	f043 0308 	orr.w	r3, r3, #8
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <MX_GPIO_Init+0xcc>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R1_Pin|R2_Pin|R3_Pin|R4_Pin
 80016f4:	2200      	movs	r2, #0
 80016f6:	211f      	movs	r1, #31
 80016f8:	481b      	ldr	r0, [pc, #108]	; (8001768 <MX_GPIO_Init+0xd0>)
 80016fa:	f000 fef6 	bl	80024ea <HAL_GPIO_WritePin>
                          |Chon_Slave_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	2101      	movs	r1, #1
 8001702:	481a      	ldr	r0, [pc, #104]	; (800176c <MX_GPIO_Init+0xd4>)
 8001704:	f000 fef1 	bl	80024ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin
                           Chon_Slave_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin
 8001708:	231f      	movs	r3, #31
 800170a:	613b      	str	r3, [r7, #16]
                          |Chon_Slave_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170c:	2301      	movs	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2302      	movs	r3, #2
 8001716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4619      	mov	r1, r3
 800171e:	4812      	ldr	r0, [pc, #72]	; (8001768 <MX_GPIO_Init+0xd0>)
 8001720:	f000 fd48 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Reset_Pin */
  GPIO_InitStruct.Pin = Reset_Pin;
 8001724:	2301      	movs	r3, #1
 8001726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001728:	2301      	movs	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2302      	movs	r3, #2
 8001732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Reset_GPIO_Port, &GPIO_InitStruct);
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	4619      	mov	r1, r3
 800173a:	480c      	ldr	r0, [pc, #48]	; (800176c <MX_GPIO_Init+0xd4>)
 800173c:	f000 fd3a 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin C4_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin|C4_Pin;
 8001740:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800174a:	2301      	movs	r3, #1
 800174c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_GPIO_Init+0xd4>)
 8001756:	f000 fd2d 	bl	80021b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800175a:	bf00      	nop
 800175c:	3720      	adds	r7, #32
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	40010800 	.word	0x40010800
 800176c:	40010c00 	.word	0x40010c00

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001778:	e7fe      	b.n	8001778 <Error_Handler+0x8>
	...

0800177c <RC522_SPI_Transfer>:
 * Chuc nang: wait 1 byte is stored in register MFRC522
 * Input:addr-> I just wrote down, val-> Value to record
 * Check: No
 */
uint8_t RC522_SPI_Transfer(uint8_t data)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af02      	add	r7, sp, #8
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_SPI_TransmitReceive(&hspi1,&data,&rx_data,1,100);
 8001786:	f107 020f 	add.w	r2, r7, #15
 800178a:	1df9      	adds	r1, r7, #7
 800178c:	2364      	movs	r3, #100	; 0x64
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2301      	movs	r3, #1
 8001792:	4804      	ldr	r0, [pc, #16]	; (80017a4 <RC522_SPI_Transfer+0x28>)
 8001794:	f001 ffde 	bl	8003754 <HAL_SPI_TransmitReceive>
	/*while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_TXE)==RESET);
	SPI_I2S_SendData(MFRC522_SPI,data);

	while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_RXNE)==RESET);
	return SPI_I2S_ReceiveData(MFRC522_SPI);*/
	return rx_data;
 8001798:	7bfb      	ldrb	r3, [r7, #15]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000088 	.word	0x20000088

080017a8 <Write_MFRC522>:
 * Note: wait 1 byte is stored in register MFRC522
 * Input: addr-> DIa write only, val-> Value to write
 * Check: No
 */
void Write_MFRC522(uint8_t addr, uint8_t val)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	460a      	mov	r2, r1
 80017b2:	71fb      	strb	r3, [r7, #7]
 80017b4:	4613      	mov	r3, r2
 80017b6:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2110      	movs	r1, #16
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <Write_MFRC522+0x48>)
 80017be:	f000 fe94 	bl	80024ea <HAL_GPIO_WritePin>
	//The address is located:0XXXXXX0
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ffd4 	bl	800177c <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80017d4:	79bb      	ldrb	r3, [r7, #6]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ffd0 	bl	800177c <RC522_SPI_Transfer>
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	2110      	movs	r1, #16
 80017e0:	4803      	ldr	r0, [pc, #12]	; (80017f0 <Write_MFRC522+0x48>)
 80017e2:	f000 fe82 	bl	80024ea <HAL_GPIO_WritePin>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40010800 	.word	0x40010800

080017f4 <Read_MFRC522>:
 * Note: A 1-byte doc is stored from a register MFRC522
 * Input: addr-> address doc
 * Look up: Value in the read register
 */
uint8_t Read_MFRC522(uint8_t addr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	2110      	movs	r1, #16
 8001802:	480f      	ldr	r0, [pc, #60]	; (8001840 <Read_MFRC522+0x4c>)
 8001804:	f000 fe71 	bl	80024ea <HAL_GPIO_WritePin>

	//The address is located:1XXXXXX0
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	b25b      	sxtb	r3, r3
 800180e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001812:	b25b      	sxtb	r3, r3
 8001814:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001818:	b25b      	sxtb	r3, r3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ffad 	bl	800177c <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8001822:	2000      	movs	r0, #0
 8001824:	f7ff ffaa 	bl	800177c <RC522_SPI_Transfer>
 8001828:	4603      	mov	r3, r0
 800182a:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 800182c:	2201      	movs	r2, #1
 800182e:	2110      	movs	r1, #16
 8001830:	4803      	ldr	r0, [pc, #12]	; (8001840 <Read_MFRC522+0x4c>)
 8001832:	f000 fe5a 	bl	80024ea <HAL_GPIO_WritePin>
	return val;	
 8001836:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40010800 	.word	0x40010800

08001844 <SetBitMask>:
 * Note: Set bits in an MFRC522 register
 * Input: reg - Registers settings; mask - value set
 * Check: No
 */
void SetBitMask(uint8_t reg, uint8_t mask)  
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ffcc 	bl	80017f4 <Read_MFRC522>
 800185c:	4603      	mov	r3, r0
 800185e:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	79bb      	ldrb	r3, [r7, #6]
 8001864:	4313      	orrs	r3, r2
 8001866:	b2da      	uxtb	r2, r3
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff9b 	bl	80017a8 <Write_MFRC522>
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <ClearBitMask>:
 * Note: Reset bit in register MFRC522
 * Input: reg - Dia register; mask - Value bit can clear
 * Check: No
 */
void ClearBitMask(uint8_t reg, uint8_t mask)  
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	460a      	mov	r2, r1
 8001884:	71fb      	strb	r3, [r7, #7]
 8001886:	4613      	mov	r3, r2
 8001888:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ffb1 	bl	80017f4 <Read_MFRC522>
 8001892:	4603      	mov	r3, r0
 8001894:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001896:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800189a:	43db      	mvns	r3, r3
 800189c:	b25a      	sxtb	r2, r3
 800189e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a2:	4013      	ands	r3, r2
 80018a4:	b25b      	sxtb	r3, r3
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff7b 	bl	80017a8 <Write_MFRC522>
} 
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <AntennaOn>:
 * Chuc Nang: Mo antenna, should have at least 1 ms
 * Input: no
 * Check: no
 */
void AntennaOn(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
	

Read_MFRC522(TxControlReg);
 80018be:	2014      	movs	r0, #20
 80018c0:	f7ff ff98 	bl	80017f4 <Read_MFRC522>
//	if (!(temp & 0x03))
//	{
//		SetBitMask(TxControlReg, 0x03);
//	}
	SetBitMask(TxControlReg, 0x03);
 80018c4:	2103      	movs	r1, #3
 80018c6:	2014      	movs	r0, #20
 80018c8:	f7ff ffbc 	bl	8001844 <SetBitMask>
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <MFRC522_Reset>:
 * Look: Restart RC522
 * Input: No.
 * Return: No.
 */
void MFRC522_Reset(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80018d4:	210f      	movs	r1, #15
 80018d6:	2001      	movs	r0, #1
 80018d8:	f7ff ff66 	bl	80017a8 <Write_MFRC522>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <MFRC522_Init>:
 * Start RC522
 * Input:  No.
 * Look up:  No.
 */
void MFRC522_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0

	//GPIO_SetBits(MFRC522_CS_GPIO,MFRC522_CS_PIN);						// Activate the RFID reader
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80018e4:	2201      	movs	r2, #1
 80018e6:	2110      	movs	r1, #16
 80018e8:	4812      	ldr	r0, [pc, #72]	; (8001934 <MFRC522_Init+0x54>)
 80018ea:	f000 fdfe 	bl	80024ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 80018ee:	2201      	movs	r2, #1
 80018f0:	2101      	movs	r1, #1
 80018f2:	4811      	ldr	r0, [pc, #68]	; (8001938 <MFRC522_Init+0x58>)
 80018f4:	f000 fdf9 	bl	80024ea <HAL_GPIO_WritePin>
	//GPIO_SetBits(MFRC522_RST_GPIO,MFRC522_RST_PIN);					// not reset

		// spi config
	//MFRC522_SPI_Init();
	
	MFRC522_Reset();
 80018f8:	f7ff ffea 	bl	80018d0 <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//auto=1; f(Timer) = 6.78MHz/TPreScaler
 80018fc:	218d      	movs	r1, #141	; 0x8d
 80018fe:	202a      	movs	r0, #42	; 0x2a
 8001900:	f7ff ff52 	bl	80017a8 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8001904:	213e      	movs	r1, #62	; 0x3e
 8001906:	202b      	movs	r0, #43	; 0x2b
 8001908:	f7ff ff4e 	bl	80017a8 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 800190c:	211e      	movs	r1, #30
 800190e:	202d      	movs	r0, #45	; 0x2d
 8001910:	f7ff ff4a 	bl	80017a8 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8001914:	2100      	movs	r1, #0
 8001916:	202c      	movs	r0, #44	; 0x2c
 8001918:	f7ff ff46 	bl	80017a8 <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		//100%ASK
 800191c:	2140      	movs	r1, #64	; 0x40
 800191e:	2015      	movs	r0, #21
 8001920:	f7ff ff42 	bl	80017a8 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		//CRC Original value 0x6363	???
 8001924:	213d      	movs	r1, #61	; 0x3d
 8001926:	2011      	movs	r0, #17
 8001928:	f7ff ff3e 	bl	80017a8 <Write_MFRC522>

	//ClearBitMask(Status2Reg, 0x08);		//MFCrypto1On=0
	//Write_MFRC522(RxSelReg, 0x86);		//RxWait = RxSelReg[5..0]
	//Write_MFRC522(RFCfgReg, 0x7F);   		//RxGain = 48dB

	AntennaOn();		//Mo Anten
 800192c:	f7ff ffc5 	bl	80018ba <AntennaOn>
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40010800 	.word	0x40010800
 8001938:	40010c00 	.word	0x40010c00

0800193c <MFRC522_ToCard>:
 *			 backData - BackData is returned
 *			 backLen - Retrieve the data number
 * Check: MI_OK if successful
 */
uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint *backLen)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	4603      	mov	r3, r0
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	4613      	mov	r3, r2
 800194c:	73bb      	strb	r3, [r7, #14]
    uint8_t status = MI_ERR;
 800194e:	2302      	movs	r3, #2
 8001950:	77fb      	strb	r3, [r7, #31]
    uint8_t irqEn = 0x00;
 8001952:	2300      	movs	r3, #0
 8001954:	77bb      	strb	r3, [r7, #30]
    uint8_t waitIRq = 0x00;
 8001956:	2300      	movs	r3, #0
 8001958:	777b      	strb	r3, [r7, #29]
    uint8_t lastBits;
    uint8_t n;
    uint i;

    switch (command)
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	2b0c      	cmp	r3, #12
 800195e:	d006      	beq.n	800196e <MFRC522_ToCard+0x32>
 8001960:	2b0e      	cmp	r3, #14
 8001962:	d109      	bne.n	8001978 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		//Acknowledging the liver
		{
			irqEn = 0x12;
 8001964:	2312      	movs	r3, #18
 8001966:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8001968:	2310      	movs	r3, #16
 800196a:	777b      	strb	r3, [r7, #29]
			break;
 800196c:	e005      	b.n	800197a <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// FIFO data collection
		{
			irqEn = 0x77;
 800196e:	2377      	movs	r3, #119	; 0x77
 8001970:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8001972:	2330      	movs	r3, #48	; 0x30
 8001974:	777b      	strb	r3, [r7, #29]
			break;
 8001976:	e000      	b.n	800197a <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001978:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	//Yeu cau ngat
 800197a:	7fbb      	ldrb	r3, [r7, #30]
 800197c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001980:	b2db      	uxtb	r3, r3
 8001982:	4619      	mov	r1, r3
 8001984:	2002      	movs	r0, #2
 8001986:	f7ff ff0f 	bl	80017a8 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			//Clear all the bits
 800198a:	2180      	movs	r1, #128	; 0x80
 800198c:	2004      	movs	r0, #4
 800198e:	f7ff ff74 	bl	800187a <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//FlushBuffer=1, FIFO
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	200a      	movs	r0, #10
 8001996:	f7ff ff55 	bl	8001844 <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	//NO action; Huy bo lenh hien hanh	???
 800199a:	2100      	movs	r1, #0
 800199c:	2001      	movs	r0, #1
 800199e:	f7ff ff03 	bl	80017a8 <Write_MFRC522>

	// Record in FIFO
    for (i=0; i<sendLen; i++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
 80019a6:	e00a      	b.n	80019be <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	4413      	add	r3, r2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	2009      	movs	r0, #9
 80019b4:	f7ff fef8 	bl	80017a8 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	3301      	adds	r3, #1
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	7bbb      	ldrb	r3, [r7, #14]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d3f0      	bcc.n	80019a8 <MFRC522_ToCard+0x6c>
	}

	//chay
	Write_MFRC522(CommandReg, command);
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	4619      	mov	r1, r3
 80019ca:	2001      	movs	r0, #1
 80019cc:	f7ff feec 	bl	80017a8 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	2b0c      	cmp	r3, #12
 80019d4:	d103      	bne.n	80019de <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		//StartSend=1,transmission of data starts  
 80019d6:	2180      	movs	r1, #128	; 0x80
 80019d8:	200d      	movs	r0, #13
 80019da:	f7ff ff33 	bl	8001844 <SetBitMask>
	}   
    
	//The team is allowed to be stored
	i = 2000;	//i tuy thuoc tan so thach anh, thoi gian toi da cho the M1 la 25ms
 80019de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80019e2:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80019e4:	2004      	movs	r0, #4
 80019e6:	f7ff ff05 	bl	80017f4 <Read_MFRC522>
 80019ea:	4603      	mov	r3, r0
 80019ec:	773b      	strb	r3, [r7, #28]
        i--;
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00a      	beq.n	8001a10 <MFRC522_ToCard+0xd4>
 80019fa:	7f3b      	ldrb	r3, [r7, #28]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d105      	bne.n	8001a10 <MFRC522_ToCard+0xd4>
 8001a04:	7f3a      	ldrb	r2, [r7, #28]
 8001a06:	7f7b      	ldrb	r3, [r7, #29]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0e9      	beq.n	80019e4 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	200d      	movs	r0, #13
 8001a14:	f7ff ff31 	bl	800187a <ClearBitMask>
	
    if (i != 0)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d052      	beq.n	8001ac4 <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8001a1e:	2006      	movs	r0, #6
 8001a20:	f7ff fee8 	bl	80017f4 <Read_MFRC522>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f003 031b 	and.w	r3, r3, #27
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d148      	bne.n	8001ac0 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8001a32:	7f3a      	ldrb	r2, [r7, #28]
 8001a34:	7fbb      	ldrb	r3, [r7, #30]
 8001a36:	4013      	ands	r3, r2
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;			//??   
 8001a42:	2301      	movs	r3, #1
 8001a44:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	2b0c      	cmp	r3, #12
 8001a4a:	d13b      	bne.n	8001ac4 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8001a4c:	200a      	movs	r0, #10
 8001a4e:	f7ff fed1 	bl	80017f4 <Read_MFRC522>
 8001a52:	4603      	mov	r3, r0
 8001a54:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001a56:	200c      	movs	r0, #12
 8001a58:	f7ff fecc 	bl	80017f4 <Read_MFRC522>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d008      	beq.n	8001a7c <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 8001a6a:	7f3b      	ldrb	r3, [r7, #28]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	00da      	lsls	r2, r3, #3
 8001a70:	7dfb      	ldrb	r3, [r7, #23]
 8001a72:	4413      	add	r3, r2
 8001a74:	461a      	mov	r2, r3
 8001a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	e004      	b.n	8001a86 <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 8001a7c:	7f3b      	ldrb	r3, [r7, #28]
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	461a      	mov	r2, r3
 8001a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a84:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8001a86:	7f3b      	ldrb	r3, [r7, #28]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8001a90:	7f3b      	ldrb	r3, [r7, #28]
 8001a92:	2b10      	cmp	r3, #16
 8001a94:	d901      	bls.n	8001a9a <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 8001a96:	2310      	movs	r3, #16
 8001a98:	773b      	strb	r3, [r7, #28]
				}
				
				//FIFO doc in the received data
                for (i=0; i<n; i++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	e00a      	b.n	8001ab6 <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	18d4      	adds	r4, r2, r3
 8001aa6:	2009      	movs	r0, #9
 8001aa8:	f7ff fea4 	bl	80017f4 <Read_MFRC522>
 8001aac:	4603      	mov	r3, r0
 8001aae:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	7f3b      	ldrb	r3, [r7, #28]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d3f0      	bcc.n	8001aa0 <MFRC522_ToCard+0x164>
 8001abe:	e001      	b.n	8001ac4 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 8001ac4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3724      	adds	r7, #36	; 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd90      	pop	{r4, r7, pc}

08001ace <MFRC522_Request>:
 *				0x0800 = Mifare_Pro(X)
 *				0x4403 = Mifare_DESFire
 * Return: MI_OK if the bar is curved
 */
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af02      	add	r7, sp, #8
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	6039      	str	r1, [r7, #0]
 8001ad8:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint backBits;			//The bits are manipulated

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8001ada:	2107      	movs	r1, #7
 8001adc:	200d      	movs	r0, #13
 8001ade:	f7ff fe63 	bl	80017a8 <Write_MFRC522>
	
	TagType[0] = reqMode;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	79fa      	ldrb	r2, [r7, #7]
 8001ae6:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001ae8:	f107 0308 	add.w	r3, r7, #8
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2201      	movs	r2, #1
 8001af2:	6839      	ldr	r1, [r7, #0]
 8001af4:	200c      	movs	r0, #12
 8001af6:	f7ff ff21 	bl	800193c <MFRC522_ToCard>
 8001afa:	4603      	mov	r3, r0
 8001afc:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <MFRC522_Request+0x3c>
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b10      	cmp	r3, #16
 8001b08:	d001      	beq.n	8001b0e <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <MFRC522_Anticoll>:
 * Detect the collision, select and read the serial number
 * Input: serNum - Look up the serial the 4 byte, byte 5 is the ma checksum
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Anticoll(uint8_t *serNum)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	737b      	strb	r3, [r7, #13]
    uint unLen;
    

    //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
    //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001b24:	2100      	movs	r1, #0
 8001b26:	200d      	movs	r0, #13
 8001b28:	f7ff fe3e 	bl	80017a8 <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2293      	movs	r2, #147	; 0x93
 8001b30:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3301      	adds	r3, #1
 8001b36:	2220      	movs	r2, #32
 8001b38:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001b3a:	f107 0308 	add.w	r3, r7, #8
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	200c      	movs	r0, #12
 8001b48:	f7ff fef8 	bl	800193c <MFRC522_ToCard>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d118      	bne.n	8001b88 <MFRC522_Anticoll+0x70>
	{
		//Check the serial number
		for (i=0; i<4; i++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	73bb      	strb	r3, [r7, #14]
 8001b5a:	e009      	b.n	8001b70 <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 8001b5c:	7bbb      	ldrb	r3, [r7, #14]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	7b7b      	ldrb	r3, [r7, #13]
 8001b66:	4053      	eors	r3, r2
 8001b68:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8001b6a:	7bbb      	ldrb	r3, [r7, #14]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	73bb      	strb	r3, [r7, #14]
 8001b70:	7bbb      	ldrb	r3, [r7, #14]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d9f2      	bls.n	8001b5c <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8001b76:	7bbb      	ldrb	r3, [r7, #14]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	7b7a      	ldrb	r2, [r7, #13]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 8001b84:	2302      	movs	r3, #2
 8001b86:	73fb      	strb	r3, [r7, #15]
		}
    }

    //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

    return status;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
} 
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_MspInit+0x5c>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <HAL_MspInit+0x5c>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6193      	str	r3, [r2, #24]
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_MspInit+0x5c>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_MspInit+0x5c>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <HAL_MspInit+0x5c>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	61d3      	str	r3, [r2, #28]
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <HAL_MspInit+0x5c>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_MspInit+0x60>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <HAL_MspInit+0x60>)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40010000 	.word	0x40010000

08001bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a15      	ldr	r2, [pc, #84]	; (8001c68 <HAL_I2C_MspInit+0x70>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d123      	bne.n	8001c60 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c18:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <HAL_I2C_MspInit+0x74>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	4a13      	ldr	r2, [pc, #76]	; (8001c6c <HAL_I2C_MspInit+0x74>)
 8001c1e:	f043 0308 	orr.w	r3, r3, #8
 8001c22:	6193      	str	r3, [r2, #24]
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <HAL_I2C_MspInit+0x74>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c30:	23c0      	movs	r3, #192	; 0xc0
 8001c32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c34:	2312      	movs	r3, #18
 8001c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	4619      	mov	r1, r3
 8001c42:	480b      	ldr	r0, [pc, #44]	; (8001c70 <HAL_I2C_MspInit+0x78>)
 8001c44:	f000 fab6 	bl	80021b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <HAL_I2C_MspInit+0x74>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	4a07      	ldr	r2, [pc, #28]	; (8001c6c <HAL_I2C_MspInit+0x74>)
 8001c4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c52:	61d3      	str	r3, [r2, #28]
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_I2C_MspInit+0x74>)
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c60:	bf00      	nop
 8001c62:	3720      	adds	r7, #32
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40005400 	.word	0x40005400
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40010c00 	.word	0x40010c00

08001c74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1b      	ldr	r2, [pc, #108]	; (8001cfc <HAL_SPI_MspInit+0x88>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d12f      	bne.n	8001cf4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_SPI_MspInit+0x8c>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a19      	ldr	r2, [pc, #100]	; (8001d00 <HAL_SPI_MspInit+0x8c>)
 8001c9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <HAL_SPI_MspInit+0x8c>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <HAL_SPI_MspInit+0x8c>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	4a13      	ldr	r2, [pc, #76]	; (8001d00 <HAL_SPI_MspInit+0x8c>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	6193      	str	r3, [r2, #24]
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_SPI_MspInit+0x8c>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001cc4:	23a0      	movs	r3, #160	; 0xa0
 8001cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480b      	ldr	r0, [pc, #44]	; (8001d04 <HAL_SPI_MspInit+0x90>)
 8001cd8:	f000 fa6c 	bl	80021b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cdc:	2340      	movs	r3, #64	; 0x40
 8001cde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	4619      	mov	r1, r3
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <HAL_SPI_MspInit+0x90>)
 8001cf0:	f000 fa60 	bl	80021b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cf4:	bf00      	nop
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40013000 	.word	0x40013000
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40010800 	.word	0x40010800

08001d08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d18:	d10b      	bne.n	8001d32 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <HAL_TIM_Base_MspInit+0x34>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	4a07      	ldr	r2, [pc, #28]	; (8001d3c <HAL_TIM_Base_MspInit+0x34>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	61d3      	str	r3, [r2, #28]
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_TIM_Base_MspInit+0x34>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	40021000 	.word	0x40021000

08001d40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5e:	d12a      	bne.n	8001db6 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d60:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <HAL_TIM_MspPostInit+0x80>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a16      	ldr	r2, [pc, #88]	; (8001dc0 <HAL_TIM_MspPostInit+0x80>)
 8001d66:	f043 0304 	orr.w	r3, r3, #4
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <HAL_TIM_MspPostInit+0x80>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2302      	movs	r3, #2
 8001d84:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	f107 030c 	add.w	r3, r7, #12
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <HAL_TIM_MspPostInit+0x84>)
 8001d8e:	f000 fa11 	bl	80021b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_TIM_MspPostInit+0x88>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dae:	61fb      	str	r3, [r7, #28]
 8001db0:	4a05      	ldr	r2, [pc, #20]	; (8001dc8 <HAL_TIM_MspPostInit+0x88>)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001db6:	bf00      	nop
 8001db8:	3720      	adds	r7, #32
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010800 	.word	0x40010800
 8001dc8:	40010000 	.word	0x40010000

08001dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <NMI_Handler+0x4>

08001dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <HardFault_Handler+0x4>

08001dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <MemManage_Handler+0x4>

08001dde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de2:	e7fe      	b.n	8001de2 <BusFault_Handler+0x4>

08001de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <UsageFault_Handler+0x4>

08001dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr

08001df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e12:	f000 f875 	bl	8001f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
	...

08001e28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e28:	f7ff fff7 	bl	8001e1a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e2c:	480b      	ldr	r0, [pc, #44]	; (8001e5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e2e:	490c      	ldr	r1, [pc, #48]	; (8001e60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e30:	4a0c      	ldr	r2, [pc, #48]	; (8001e64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e44:	4c09      	ldr	r4, [pc, #36]	; (8001e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e52:	f002 fcb3 	bl	80047bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e56:	f7fe fea9 	bl	8000bac <main>
  bx lr
 8001e5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e60:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001e64:	080048c8 	.word	0x080048c8
  ldr r2, =_sbss
 8001e68:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001e6c:	200001a8 	.word	0x200001a8

08001e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e70:	e7fe      	b.n	8001e70 <ADC1_2_IRQHandler>
	...

08001e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <HAL_Init+0x28>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <HAL_Init+0x28>)
 8001e7e:	f043 0310 	orr.w	r3, r3, #16
 8001e82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e84:	2003      	movs	r0, #3
 8001e86:	f000 f92b 	bl	80020e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8a:	200f      	movs	r0, #15
 8001e8c:	f000 f808 	bl	8001ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e90:	f7ff fe80 	bl	8001b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40022000 	.word	0x40022000

08001ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_InitTick+0x54>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_InitTick+0x58>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f935 	bl	800212e <HAL_SYSTICK_Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00e      	b.n	8001eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b0f      	cmp	r3, #15
 8001ed2:	d80a      	bhi.n	8001eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f000 f90b 	bl	80020f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee0:	4a06      	ldr	r2, [pc, #24]	; (8001efc <HAL_InitTick+0x5c>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	2000000c 	.word	0x2000000c
 8001ef8:	20000014 	.word	0x20000014
 8001efc:	20000010 	.word	0x20000010

08001f00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_IncTick+0x1c>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_IncTick+0x20>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a03      	ldr	r2, [pc, #12]	; (8001f20 <HAL_IncTick+0x20>)
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	20000014 	.word	0x20000014
 8001f20:	200001a4 	.word	0x200001a4

08001f24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b02      	ldr	r3, [pc, #8]	; (8001f34 <HAL_GetTick+0x10>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	200001a4 	.word	0x200001a4

08001f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff fff0 	bl	8001f24 <HAL_GetTick>
 8001f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d005      	beq.n	8001f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f52:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <HAL_Delay+0x44>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f5e:	bf00      	nop
 8001f60:	f7ff ffe0 	bl	8001f24 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d8f7      	bhi.n	8001f60 <HAL_Delay+0x28>
  {
  }
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000014 	.word	0x20000014

08001f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb2:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	60d3      	str	r3, [r2, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	f003 0307 	and.w	r3, r3, #7
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0a      	blt.n	800200e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	490c      	ldr	r1, [pc, #48]	; (8002030 <__NVIC_SetPriority+0x4c>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	440b      	add	r3, r1
 8002008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800200c:	e00a      	b.n	8002024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4908      	ldr	r1, [pc, #32]	; (8002034 <__NVIC_SetPriority+0x50>)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3b04      	subs	r3, #4
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	440b      	add	r3, r1
 8002022:	761a      	strb	r2, [r3, #24]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f1c3 0307 	rsb	r3, r3, #7
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf28      	it	cs
 8002056:	2304      	movcs	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	2b06      	cmp	r3, #6
 8002060:	d902      	bls.n	8002068 <NVIC_EncodePriority+0x30>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b03      	subs	r3, #3
 8002066:	e000      	b.n	800206a <NVIC_EncodePriority+0x32>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	f04f 32ff 	mov.w	r2, #4294967295
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002080:	f04f 31ff 	mov.w	r1, #4294967295
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43d9      	mvns	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	4313      	orrs	r3, r2
         );
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ac:	d301      	bcc.n	80020b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ae:	2301      	movs	r3, #1
 80020b0:	e00f      	b.n	80020d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b2:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <SysTick_Config+0x40>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ba:	210f      	movs	r1, #15
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	f7ff ff90 	bl	8001fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <SysTick_Config+0x40>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <SysTick_Config+0x40>)
 80020cc:	2207      	movs	r2, #7
 80020ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	e000e010 	.word	0xe000e010

080020e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ff49 	bl	8001f80 <__NVIC_SetPriorityGrouping>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002108:	f7ff ff5e 	bl	8001fc8 <__NVIC_GetPriorityGrouping>
 800210c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f7ff ff90 	bl	8002038 <NVIC_EncodePriority>
 8002118:	4602      	mov	r2, r0
 800211a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff5f 	bl	8001fe4 <__NVIC_SetPriority>
}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff ffb0 	bl	800209c <SysTick_Config>
 800213c:	4603      	mov	r3, r0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <HAL_FLASH_Unlock+0x40>)
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00d      	beq.n	800217a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_FLASH_Unlock+0x40>)
 8002160:	4a0a      	ldr	r2, [pc, #40]	; (800218c <HAL_FLASH_Unlock+0x44>)
 8002162:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_FLASH_Unlock+0x40>)
 8002166:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <HAL_FLASH_Unlock+0x48>)
 8002168:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_FLASH_Unlock+0x40>)
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800217a:	79fb      	ldrb	r3, [r7, #7]
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40022000 	.word	0x40022000
 800218c:	45670123 	.word	0x45670123
 8002190:	cdef89ab 	.word	0xcdef89ab

08002194 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_FLASH_Lock+0x1c>)
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <HAL_FLASH_Lock+0x1c>)
 800219e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40022000 	.word	0x40022000

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b08b      	sub	sp, #44	; 0x2c
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021c2:	2300      	movs	r3, #0
 80021c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c6:	e169      	b.n	800249c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021c8:	2201      	movs	r2, #1
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	69fa      	ldr	r2, [r7, #28]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	f040 8158 	bne.w	8002496 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4a9a      	ldr	r2, [pc, #616]	; (8002454 <HAL_GPIO_Init+0x2a0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d05e      	beq.n	80022ae <HAL_GPIO_Init+0xfa>
 80021f0:	4a98      	ldr	r2, [pc, #608]	; (8002454 <HAL_GPIO_Init+0x2a0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d875      	bhi.n	80022e2 <HAL_GPIO_Init+0x12e>
 80021f6:	4a98      	ldr	r2, [pc, #608]	; (8002458 <HAL_GPIO_Init+0x2a4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d058      	beq.n	80022ae <HAL_GPIO_Init+0xfa>
 80021fc:	4a96      	ldr	r2, [pc, #600]	; (8002458 <HAL_GPIO_Init+0x2a4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d86f      	bhi.n	80022e2 <HAL_GPIO_Init+0x12e>
 8002202:	4a96      	ldr	r2, [pc, #600]	; (800245c <HAL_GPIO_Init+0x2a8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d052      	beq.n	80022ae <HAL_GPIO_Init+0xfa>
 8002208:	4a94      	ldr	r2, [pc, #592]	; (800245c <HAL_GPIO_Init+0x2a8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d869      	bhi.n	80022e2 <HAL_GPIO_Init+0x12e>
 800220e:	4a94      	ldr	r2, [pc, #592]	; (8002460 <HAL_GPIO_Init+0x2ac>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d04c      	beq.n	80022ae <HAL_GPIO_Init+0xfa>
 8002214:	4a92      	ldr	r2, [pc, #584]	; (8002460 <HAL_GPIO_Init+0x2ac>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d863      	bhi.n	80022e2 <HAL_GPIO_Init+0x12e>
 800221a:	4a92      	ldr	r2, [pc, #584]	; (8002464 <HAL_GPIO_Init+0x2b0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d046      	beq.n	80022ae <HAL_GPIO_Init+0xfa>
 8002220:	4a90      	ldr	r2, [pc, #576]	; (8002464 <HAL_GPIO_Init+0x2b0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d85d      	bhi.n	80022e2 <HAL_GPIO_Init+0x12e>
 8002226:	2b12      	cmp	r3, #18
 8002228:	d82a      	bhi.n	8002280 <HAL_GPIO_Init+0xcc>
 800222a:	2b12      	cmp	r3, #18
 800222c:	d859      	bhi.n	80022e2 <HAL_GPIO_Init+0x12e>
 800222e:	a201      	add	r2, pc, #4	; (adr r2, 8002234 <HAL_GPIO_Init+0x80>)
 8002230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002234:	080022af 	.word	0x080022af
 8002238:	08002289 	.word	0x08002289
 800223c:	0800229b 	.word	0x0800229b
 8002240:	080022dd 	.word	0x080022dd
 8002244:	080022e3 	.word	0x080022e3
 8002248:	080022e3 	.word	0x080022e3
 800224c:	080022e3 	.word	0x080022e3
 8002250:	080022e3 	.word	0x080022e3
 8002254:	080022e3 	.word	0x080022e3
 8002258:	080022e3 	.word	0x080022e3
 800225c:	080022e3 	.word	0x080022e3
 8002260:	080022e3 	.word	0x080022e3
 8002264:	080022e3 	.word	0x080022e3
 8002268:	080022e3 	.word	0x080022e3
 800226c:	080022e3 	.word	0x080022e3
 8002270:	080022e3 	.word	0x080022e3
 8002274:	080022e3 	.word	0x080022e3
 8002278:	08002291 	.word	0x08002291
 800227c:	080022a5 	.word	0x080022a5
 8002280:	4a79      	ldr	r2, [pc, #484]	; (8002468 <HAL_GPIO_Init+0x2b4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d013      	beq.n	80022ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002286:	e02c      	b.n	80022e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	623b      	str	r3, [r7, #32]
          break;
 800228e:	e029      	b.n	80022e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	3304      	adds	r3, #4
 8002296:	623b      	str	r3, [r7, #32]
          break;
 8002298:	e024      	b.n	80022e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	3308      	adds	r3, #8
 80022a0:	623b      	str	r3, [r7, #32]
          break;
 80022a2:	e01f      	b.n	80022e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	330c      	adds	r3, #12
 80022aa:	623b      	str	r3, [r7, #32]
          break;
 80022ac:	e01a      	b.n	80022e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d102      	bne.n	80022bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022b6:	2304      	movs	r3, #4
 80022b8:	623b      	str	r3, [r7, #32]
          break;
 80022ba:	e013      	b.n	80022e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d105      	bne.n	80022d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022c4:	2308      	movs	r3, #8
 80022c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	611a      	str	r2, [r3, #16]
          break;
 80022ce:	e009      	b.n	80022e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022d0:	2308      	movs	r3, #8
 80022d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	615a      	str	r2, [r3, #20]
          break;
 80022da:	e003      	b.n	80022e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022dc:	2300      	movs	r3, #0
 80022de:	623b      	str	r3, [r7, #32]
          break;
 80022e0:	e000      	b.n	80022e4 <HAL_GPIO_Init+0x130>
          break;
 80022e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2bff      	cmp	r3, #255	; 0xff
 80022e8:	d801      	bhi.n	80022ee <HAL_GPIO_Init+0x13a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	e001      	b.n	80022f2 <HAL_GPIO_Init+0x13e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3304      	adds	r3, #4
 80022f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	2bff      	cmp	r3, #255	; 0xff
 80022f8:	d802      	bhi.n	8002300 <HAL_GPIO_Init+0x14c>
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	e002      	b.n	8002306 <HAL_GPIO_Init+0x152>
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	3b08      	subs	r3, #8
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	210f      	movs	r1, #15
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	fa01 f303 	lsl.w	r3, r1, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	401a      	ands	r2, r3
 8002318:	6a39      	ldr	r1, [r7, #32]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	431a      	orrs	r2, r3
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 80b1 	beq.w	8002496 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002334:	4b4d      	ldr	r3, [pc, #308]	; (800246c <HAL_GPIO_Init+0x2b8>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	4a4c      	ldr	r2, [pc, #304]	; (800246c <HAL_GPIO_Init+0x2b8>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6193      	str	r3, [r2, #24]
 8002340:	4b4a      	ldr	r3, [pc, #296]	; (800246c <HAL_GPIO_Init+0x2b8>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800234c:	4a48      	ldr	r2, [pc, #288]	; (8002470 <HAL_GPIO_Init+0x2bc>)
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	3302      	adds	r3, #2
 8002354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002358:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	220f      	movs	r2, #15
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4013      	ands	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a40      	ldr	r2, [pc, #256]	; (8002474 <HAL_GPIO_Init+0x2c0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d013      	beq.n	80023a0 <HAL_GPIO_Init+0x1ec>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a3f      	ldr	r2, [pc, #252]	; (8002478 <HAL_GPIO_Init+0x2c4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d00d      	beq.n	800239c <HAL_GPIO_Init+0x1e8>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a3e      	ldr	r2, [pc, #248]	; (800247c <HAL_GPIO_Init+0x2c8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d007      	beq.n	8002398 <HAL_GPIO_Init+0x1e4>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a3d      	ldr	r2, [pc, #244]	; (8002480 <HAL_GPIO_Init+0x2cc>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d101      	bne.n	8002394 <HAL_GPIO_Init+0x1e0>
 8002390:	2303      	movs	r3, #3
 8002392:	e006      	b.n	80023a2 <HAL_GPIO_Init+0x1ee>
 8002394:	2304      	movs	r3, #4
 8002396:	e004      	b.n	80023a2 <HAL_GPIO_Init+0x1ee>
 8002398:	2302      	movs	r3, #2
 800239a:	e002      	b.n	80023a2 <HAL_GPIO_Init+0x1ee>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_GPIO_Init+0x1ee>
 80023a0:	2300      	movs	r3, #0
 80023a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a4:	f002 0203 	and.w	r2, r2, #3
 80023a8:	0092      	lsls	r2, r2, #2
 80023aa:	4093      	lsls	r3, r2
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023b2:	492f      	ldr	r1, [pc, #188]	; (8002470 <HAL_GPIO_Init+0x2bc>)
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	3302      	adds	r3, #2
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d006      	beq.n	80023da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023cc:	4b2d      	ldr	r3, [pc, #180]	; (8002484 <HAL_GPIO_Init+0x2d0>)
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	492c      	ldr	r1, [pc, #176]	; (8002484 <HAL_GPIO_Init+0x2d0>)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]
 80023d8:	e006      	b.n	80023e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023da:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <HAL_GPIO_Init+0x2d0>)
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	4928      	ldr	r1, [pc, #160]	; (8002484 <HAL_GPIO_Init+0x2d0>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d006      	beq.n	8002402 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023f4:	4b23      	ldr	r3, [pc, #140]	; (8002484 <HAL_GPIO_Init+0x2d0>)
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	4922      	ldr	r1, [pc, #136]	; (8002484 <HAL_GPIO_Init+0x2d0>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60cb      	str	r3, [r1, #12]
 8002400:	e006      	b.n	8002410 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002402:	4b20      	ldr	r3, [pc, #128]	; (8002484 <HAL_GPIO_Init+0x2d0>)
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	43db      	mvns	r3, r3
 800240a:	491e      	ldr	r1, [pc, #120]	; (8002484 <HAL_GPIO_Init+0x2d0>)
 800240c:	4013      	ands	r3, r2
 800240e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d006      	beq.n	800242a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_GPIO_Init+0x2d0>)
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	4918      	ldr	r1, [pc, #96]	; (8002484 <HAL_GPIO_Init+0x2d0>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
 8002428:	e006      	b.n	8002438 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800242a:	4b16      	ldr	r3, [pc, #88]	; (8002484 <HAL_GPIO_Init+0x2d0>)
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	43db      	mvns	r3, r3
 8002432:	4914      	ldr	r1, [pc, #80]	; (8002484 <HAL_GPIO_Init+0x2d0>)
 8002434:	4013      	ands	r3, r2
 8002436:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d021      	beq.n	8002488 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002444:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <HAL_GPIO_Init+0x2d0>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	490e      	ldr	r1, [pc, #56]	; (8002484 <HAL_GPIO_Init+0x2d0>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	600b      	str	r3, [r1, #0]
 8002450:	e021      	b.n	8002496 <HAL_GPIO_Init+0x2e2>
 8002452:	bf00      	nop
 8002454:	10320000 	.word	0x10320000
 8002458:	10310000 	.word	0x10310000
 800245c:	10220000 	.word	0x10220000
 8002460:	10210000 	.word	0x10210000
 8002464:	10120000 	.word	0x10120000
 8002468:	10110000 	.word	0x10110000
 800246c:	40021000 	.word	0x40021000
 8002470:	40010000 	.word	0x40010000
 8002474:	40010800 	.word	0x40010800
 8002478:	40010c00 	.word	0x40010c00
 800247c:	40011000 	.word	0x40011000
 8002480:	40011400 	.word	0x40011400
 8002484:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_GPIO_Init+0x304>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	43db      	mvns	r3, r3
 8002490:	4909      	ldr	r1, [pc, #36]	; (80024b8 <HAL_GPIO_Init+0x304>)
 8002492:	4013      	ands	r3, r2
 8002494:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	3301      	adds	r3, #1
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	fa22 f303 	lsr.w	r3, r2, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f47f ae8e 	bne.w	80021c8 <HAL_GPIO_Init+0x14>
  }
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	372c      	adds	r7, #44	; 0x2c
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	40010400 	.word	0x40010400

080024bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	887b      	ldrh	r3, [r7, #2]
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	e001      	b.n	80024de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024de:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	460b      	mov	r3, r1
 80024f4:	807b      	strh	r3, [r7, #2]
 80024f6:	4613      	mov	r3, r2
 80024f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024fa:	787b      	ldrb	r3, [r7, #1]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002500:	887a      	ldrh	r2, [r7, #2]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002506:	e003      	b.n	8002510 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002508:	887b      	ldrh	r3, [r7, #2]
 800250a:	041a      	lsls	r2, r3, #16
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	611a      	str	r2, [r3, #16]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
	...

0800251c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e12b      	b.n	8002786 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff fb58 	bl	8001bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2224      	movs	r2, #36	; 0x24
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800256e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800257e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002580:	f001 f832 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8002584:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4a81      	ldr	r2, [pc, #516]	; (8002790 <HAL_I2C_Init+0x274>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d807      	bhi.n	80025a0 <HAL_I2C_Init+0x84>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4a80      	ldr	r2, [pc, #512]	; (8002794 <HAL_I2C_Init+0x278>)
 8002594:	4293      	cmp	r3, r2
 8002596:	bf94      	ite	ls
 8002598:	2301      	movls	r3, #1
 800259a:	2300      	movhi	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	e006      	b.n	80025ae <HAL_I2C_Init+0x92>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4a7d      	ldr	r2, [pc, #500]	; (8002798 <HAL_I2C_Init+0x27c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	bf94      	ite	ls
 80025a8:	2301      	movls	r3, #1
 80025aa:	2300      	movhi	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e0e7      	b.n	8002786 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4a78      	ldr	r2, [pc, #480]	; (800279c <HAL_I2C_Init+0x280>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	0c9b      	lsrs	r3, r3, #18
 80025c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a6a      	ldr	r2, [pc, #424]	; (8002790 <HAL_I2C_Init+0x274>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d802      	bhi.n	80025f0 <HAL_I2C_Init+0xd4>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	3301      	adds	r3, #1
 80025ee:	e009      	b.n	8002604 <HAL_I2C_Init+0xe8>
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	4a69      	ldr	r2, [pc, #420]	; (80027a0 <HAL_I2C_Init+0x284>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	099b      	lsrs	r3, r3, #6
 8002602:	3301      	adds	r3, #1
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	430b      	orrs	r3, r1
 800260a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002616:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	495c      	ldr	r1, [pc, #368]	; (8002790 <HAL_I2C_Init+0x274>)
 8002620:	428b      	cmp	r3, r1
 8002622:	d819      	bhi.n	8002658 <HAL_I2C_Init+0x13c>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1e59      	subs	r1, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002632:	1c59      	adds	r1, r3, #1
 8002634:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002638:	400b      	ands	r3, r1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <HAL_I2C_Init+0x138>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1e59      	subs	r1, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fbb1 f3f3 	udiv	r3, r1, r3
 800264c:	3301      	adds	r3, #1
 800264e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002652:	e051      	b.n	80026f8 <HAL_I2C_Init+0x1dc>
 8002654:	2304      	movs	r3, #4
 8002656:	e04f      	b.n	80026f8 <HAL_I2C_Init+0x1dc>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d111      	bne.n	8002684 <HAL_I2C_Init+0x168>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1e58      	subs	r0, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	440b      	add	r3, r1
 800266e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002672:	3301      	adds	r3, #1
 8002674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002678:	2b00      	cmp	r3, #0
 800267a:	bf0c      	ite	eq
 800267c:	2301      	moveq	r3, #1
 800267e:	2300      	movne	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	e012      	b.n	80026aa <HAL_I2C_Init+0x18e>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1e58      	subs	r0, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6859      	ldr	r1, [r3, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	0099      	lsls	r1, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	fbb0 f3f3 	udiv	r3, r0, r3
 800269a:	3301      	adds	r3, #1
 800269c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf0c      	ite	eq
 80026a4:	2301      	moveq	r3, #1
 80026a6:	2300      	movne	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_Init+0x196>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e022      	b.n	80026f8 <HAL_I2C_Init+0x1dc>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10e      	bne.n	80026d8 <HAL_I2C_Init+0x1bc>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1e58      	subs	r0, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6859      	ldr	r1, [r3, #4]
 80026c2:	460b      	mov	r3, r1
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	440b      	add	r3, r1
 80026c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026cc:	3301      	adds	r3, #1
 80026ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d6:	e00f      	b.n	80026f8 <HAL_I2C_Init+0x1dc>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1e58      	subs	r0, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6859      	ldr	r1, [r3, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	0099      	lsls	r1, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ee:	3301      	adds	r3, #1
 80026f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	6809      	ldr	r1, [r1, #0]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69da      	ldr	r2, [r3, #28]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002726:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6911      	ldr	r1, [r2, #16]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68d2      	ldr	r2, [r2, #12]
 8002732:	4311      	orrs	r1, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	430b      	orrs	r3, r1
 800273a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	000186a0 	.word	0x000186a0
 8002794:	001e847f 	.word	0x001e847f
 8002798:	003d08ff 	.word	0x003d08ff
 800279c:	431bde83 	.word	0x431bde83
 80027a0:	10624dd3 	.word	0x10624dd3

080027a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	461a      	mov	r2, r3
 80027b0:	460b      	mov	r3, r1
 80027b2:	817b      	strh	r3, [r7, #10]
 80027b4:	4613      	mov	r3, r2
 80027b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027b8:	f7ff fbb4 	bl	8001f24 <HAL_GetTick>
 80027bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	f040 80e0 	bne.w	800298c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	2319      	movs	r3, #25
 80027d2:	2201      	movs	r2, #1
 80027d4:	4970      	ldr	r1, [pc, #448]	; (8002998 <HAL_I2C_Master_Transmit+0x1f4>)
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 f964 	bl	8002aa4 <I2C_WaitOnFlagUntilTimeout>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
 80027e4:	e0d3      	b.n	800298e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_I2C_Master_Transmit+0x50>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e0cc      	b.n	800298e <HAL_I2C_Master_Transmit+0x1ea>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b01      	cmp	r3, #1
 8002808:	d007      	beq.n	800281a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002828:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2221      	movs	r2, #33	; 0x21
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2210      	movs	r2, #16
 8002836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	893a      	ldrh	r2, [r7, #8]
 800284a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4a50      	ldr	r2, [pc, #320]	; (800299c <HAL_I2C_Master_Transmit+0x1f8>)
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800285c:	8979      	ldrh	r1, [r7, #10]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	6a3a      	ldr	r2, [r7, #32]
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f89c 	bl	80029a0 <I2C_MasterRequestWrite>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e08d      	b.n	800298e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002888:	e066      	b.n	8002958 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	6a39      	ldr	r1, [r7, #32]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 fa22 	bl	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00d      	beq.n	80028b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d107      	bne.n	80028b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e06b      	b.n	800298e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	781a      	ldrb	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d11b      	bne.n	800292c <HAL_I2C_Master_Transmit+0x188>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d017      	beq.n	800292c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	6a39      	ldr	r1, [r7, #32]
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 fa19 	bl	8002d68 <I2C_WaitOnBTFFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00d      	beq.n	8002958 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	2b04      	cmp	r3, #4
 8002942:	d107      	bne.n	8002954 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002952:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e01a      	b.n	800298e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295c:	2b00      	cmp	r3, #0
 800295e:	d194      	bne.n	800288a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800296e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	e000      	b.n	800298e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800298c:	2302      	movs	r3, #2
  }
}
 800298e:	4618      	mov	r0, r3
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	00100002 	.word	0x00100002
 800299c:	ffff0000 	.word	0xffff0000

080029a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	460b      	mov	r3, r1
 80029ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d006      	beq.n	80029ca <I2C_MasterRequestWrite+0x2a>
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d003      	beq.n	80029ca <I2C_MasterRequestWrite+0x2a>
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029c8:	d108      	bne.n	80029dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	e00b      	b.n	80029f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	2b12      	cmp	r3, #18
 80029e2:	d107      	bne.n	80029f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f84f 	bl	8002aa4 <I2C_WaitOnFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00d      	beq.n	8002a28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a1a:	d103      	bne.n	8002a24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e035      	b.n	8002a94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a30:	d108      	bne.n	8002a44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a32:	897b      	ldrh	r3, [r7, #10]
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a40:	611a      	str	r2, [r3, #16]
 8002a42:	e01b      	b.n	8002a7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a44:	897b      	ldrh	r3, [r7, #10]
 8002a46:	11db      	asrs	r3, r3, #7
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f003 0306 	and.w	r3, r3, #6
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f063 030f 	orn	r3, r3, #15
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	490e      	ldr	r1, [pc, #56]	; (8002a9c <I2C_MasterRequestWrite+0xfc>)
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f898 	bl	8002b98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e010      	b.n	8002a94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a72:	897b      	ldrh	r3, [r7, #10]
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	4907      	ldr	r1, [pc, #28]	; (8002aa0 <I2C_MasterRequestWrite+0x100>)
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f888 	bl	8002b98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	00010008 	.word	0x00010008
 8002aa0:	00010002 	.word	0x00010002

08002aa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab4:	e048      	b.n	8002b48 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d044      	beq.n	8002b48 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002abe:	f7ff fa31 	bl	8001f24 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d302      	bcc.n	8002ad4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d139      	bne.n	8002b48 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	0c1b      	lsrs	r3, r3, #16
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d10d      	bne.n	8002afa <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	43da      	mvns	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	461a      	mov	r2, r3
 8002af8:	e00c      	b.n	8002b14 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	43da      	mvns	r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4013      	ands	r3, r2
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d116      	bne.n	8002b48 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	f043 0220 	orr.w	r2, r3, #32
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e023      	b.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	0c1b      	lsrs	r3, r3, #16
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d10d      	bne.n	8002b6e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	43da      	mvns	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf0c      	ite	eq
 8002b64:	2301      	moveq	r3, #1
 8002b66:	2300      	movne	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	e00c      	b.n	8002b88 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	43da      	mvns	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d093      	beq.n	8002ab6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ba6:	e071      	b.n	8002c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb6:	d123      	bne.n	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	f043 0204 	orr.w	r2, r3, #4
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e067      	b.n	8002cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c06:	d041      	beq.n	8002c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c08:	f7ff f98c 	bl	8001f24 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d302      	bcc.n	8002c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d136      	bne.n	8002c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	0c1b      	lsrs	r3, r3, #16
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d10c      	bne.n	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4013      	ands	r3, r2
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	bf14      	ite	ne
 8002c3a:	2301      	movne	r3, #1
 8002c3c:	2300      	moveq	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	e00b      	b.n	8002c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	43da      	mvns	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf14      	ite	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	2300      	moveq	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d016      	beq.n	8002c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f043 0220 	orr.w	r2, r3, #32
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e021      	b.n	8002cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	0c1b      	lsrs	r3, r3, #16
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d10c      	bne.n	8002cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	43da      	mvns	r2, r3
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf14      	ite	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	2300      	moveq	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e00b      	b.n	8002cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	bf14      	ite	ne
 8002cc2:	2301      	movne	r3, #1
 8002cc4:	2300      	moveq	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f47f af6d 	bne.w	8002ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ce4:	e034      	b.n	8002d50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f886 	bl	8002df8 <I2C_IsAcknowledgeFailed>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e034      	b.n	8002d60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfc:	d028      	beq.n	8002d50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfe:	f7ff f911 	bl	8001f24 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d302      	bcc.n	8002d14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d11d      	bne.n	8002d50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1e:	2b80      	cmp	r3, #128	; 0x80
 8002d20:	d016      	beq.n	8002d50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e007      	b.n	8002d60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5a:	2b80      	cmp	r3, #128	; 0x80
 8002d5c:	d1c3      	bne.n	8002ce6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d74:	e034      	b.n	8002de0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f83e 	bl	8002df8 <I2C_IsAcknowledgeFailed>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e034      	b.n	8002df0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8c:	d028      	beq.n	8002de0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8e:	f7ff f8c9 	bl	8001f24 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d302      	bcc.n	8002da4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d11d      	bne.n	8002de0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d016      	beq.n	8002de0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	f043 0220 	orr.w	r2, r3, #32
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e007      	b.n	8002df0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d1c3      	bne.n	8002d76 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e0e:	d11b      	bne.n	8002e48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	f043 0204 	orr.w	r2, r3, #4
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e272      	b.n	800334c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8087 	beq.w	8002f82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e74:	4b92      	ldr	r3, [pc, #584]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d00c      	beq.n	8002e9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e80:	4b8f      	ldr	r3, [pc, #572]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 030c 	and.w	r3, r3, #12
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d112      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x5e>
 8002e8c:	4b8c      	ldr	r3, [pc, #560]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e98:	d10b      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9a:	4b89      	ldr	r3, [pc, #548]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d06c      	beq.n	8002f80 <HAL_RCC_OscConfig+0x12c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d168      	bne.n	8002f80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e24c      	b.n	800334c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x76>
 8002ebc:	4b80      	ldr	r3, [pc, #512]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a7f      	ldr	r2, [pc, #508]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	e02e      	b.n	8002f28 <HAL_RCC_OscConfig+0xd4>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x98>
 8002ed2:	4b7b      	ldr	r3, [pc, #492]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a7a      	ldr	r2, [pc, #488]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	4b78      	ldr	r3, [pc, #480]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a77      	ldr	r2, [pc, #476]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e01d      	b.n	8002f28 <HAL_RCC_OscConfig+0xd4>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCC_OscConfig+0xbc>
 8002ef6:	4b72      	ldr	r3, [pc, #456]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a71      	ldr	r2, [pc, #452]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	4b6f      	ldr	r3, [pc, #444]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a6e      	ldr	r2, [pc, #440]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	e00b      	b.n	8002f28 <HAL_RCC_OscConfig+0xd4>
 8002f10:	4b6b      	ldr	r3, [pc, #428]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a6a      	ldr	r2, [pc, #424]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	4b68      	ldr	r3, [pc, #416]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a67      	ldr	r2, [pc, #412]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d013      	beq.n	8002f58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7fe fff8 	bl	8001f24 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f38:	f7fe fff4 	bl	8001f24 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	; 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e200      	b.n	800334c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4a:	4b5d      	ldr	r3, [pc, #372]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0xe4>
 8002f56:	e014      	b.n	8002f82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7fe ffe4 	bl	8001f24 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f60:	f7fe ffe0 	bl	8001f24 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b64      	cmp	r3, #100	; 0x64
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e1ec      	b.n	800334c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f72:	4b53      	ldr	r3, [pc, #332]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x10c>
 8002f7e:	e000      	b.n	8002f82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d063      	beq.n	8003056 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f8e:	4b4c      	ldr	r3, [pc, #304]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 030c 	and.w	r3, r3, #12
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00b      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f9a:	4b49      	ldr	r3, [pc, #292]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d11c      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x18c>
 8002fa6:	4b46      	ldr	r3, [pc, #280]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d116      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb2:	4b43      	ldr	r3, [pc, #268]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <HAL_RCC_OscConfig+0x176>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d001      	beq.n	8002fca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e1c0      	b.n	800334c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fca:	4b3d      	ldr	r3, [pc, #244]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4939      	ldr	r1, [pc, #228]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fde:	e03a      	b.n	8003056 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d020      	beq.n	800302a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe8:	4b36      	ldr	r3, [pc, #216]	; (80030c4 <HAL_RCC_OscConfig+0x270>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7fe ff99 	bl	8001f24 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff6:	f7fe ff95 	bl	8001f24 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e1a1      	b.n	800334c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003008:	4b2d      	ldr	r3, [pc, #180]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003014:	4b2a      	ldr	r3, [pc, #168]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4927      	ldr	r1, [pc, #156]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 8003024:	4313      	orrs	r3, r2
 8003026:	600b      	str	r3, [r1, #0]
 8003028:	e015      	b.n	8003056 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302a:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <HAL_RCC_OscConfig+0x270>)
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003030:	f7fe ff78 	bl	8001f24 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003038:	f7fe ff74 	bl	8001f24 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e180      	b.n	800334c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304a:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d03a      	beq.n	80030d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d019      	beq.n	800309e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800306a:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 800306c:	2201      	movs	r2, #1
 800306e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003070:	f7fe ff58 	bl	8001f24 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003078:	f7fe ff54 	bl	8001f24 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e160      	b.n	800334c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308a:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <HAL_RCC_OscConfig+0x26c>)
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003096:	2001      	movs	r0, #1
 8003098:	f000 faba 	bl	8003610 <RCC_Delay>
 800309c:	e01c      	b.n	80030d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <HAL_RCC_OscConfig+0x274>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a4:	f7fe ff3e 	bl	8001f24 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030aa:	e00f      	b.n	80030cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ac:	f7fe ff3a 	bl	8001f24 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d908      	bls.n	80030cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e146      	b.n	800334c <HAL_RCC_OscConfig+0x4f8>
 80030be:	bf00      	nop
 80030c0:	40021000 	.word	0x40021000
 80030c4:	42420000 	.word	0x42420000
 80030c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030cc:	4b92      	ldr	r3, [pc, #584]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1e9      	bne.n	80030ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80a6 	beq.w	8003232 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e6:	2300      	movs	r3, #0
 80030e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ea:	4b8b      	ldr	r3, [pc, #556]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10d      	bne.n	8003112 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f6:	4b88      	ldr	r3, [pc, #544]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	4a87      	ldr	r2, [pc, #540]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 80030fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003100:	61d3      	str	r3, [r2, #28]
 8003102:	4b85      	ldr	r3, [pc, #532]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800310e:	2301      	movs	r3, #1
 8003110:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003112:	4b82      	ldr	r3, [pc, #520]	; (800331c <HAL_RCC_OscConfig+0x4c8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d118      	bne.n	8003150 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311e:	4b7f      	ldr	r3, [pc, #508]	; (800331c <HAL_RCC_OscConfig+0x4c8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a7e      	ldr	r2, [pc, #504]	; (800331c <HAL_RCC_OscConfig+0x4c8>)
 8003124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312a:	f7fe fefb 	bl	8001f24 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003132:	f7fe fef7 	bl	8001f24 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b64      	cmp	r3, #100	; 0x64
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e103      	b.n	800334c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003144:	4b75      	ldr	r3, [pc, #468]	; (800331c <HAL_RCC_OscConfig+0x4c8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d106      	bne.n	8003166 <HAL_RCC_OscConfig+0x312>
 8003158:	4b6f      	ldr	r3, [pc, #444]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	4a6e      	ldr	r2, [pc, #440]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6213      	str	r3, [r2, #32]
 8003164:	e02d      	b.n	80031c2 <HAL_RCC_OscConfig+0x36e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0x334>
 800316e:	4b6a      	ldr	r3, [pc, #424]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	4a69      	ldr	r2, [pc, #420]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	f023 0301 	bic.w	r3, r3, #1
 8003178:	6213      	str	r3, [r2, #32]
 800317a:	4b67      	ldr	r3, [pc, #412]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	4a66      	ldr	r2, [pc, #408]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 8003180:	f023 0304 	bic.w	r3, r3, #4
 8003184:	6213      	str	r3, [r2, #32]
 8003186:	e01c      	b.n	80031c2 <HAL_RCC_OscConfig+0x36e>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	2b05      	cmp	r3, #5
 800318e:	d10c      	bne.n	80031aa <HAL_RCC_OscConfig+0x356>
 8003190:	4b61      	ldr	r3, [pc, #388]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	4a60      	ldr	r2, [pc, #384]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 8003196:	f043 0304 	orr.w	r3, r3, #4
 800319a:	6213      	str	r3, [r2, #32]
 800319c:	4b5e      	ldr	r3, [pc, #376]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	4a5d      	ldr	r2, [pc, #372]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	6213      	str	r3, [r2, #32]
 80031a8:	e00b      	b.n	80031c2 <HAL_RCC_OscConfig+0x36e>
 80031aa:	4b5b      	ldr	r3, [pc, #364]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	4a5a      	ldr	r2, [pc, #360]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	6213      	str	r3, [r2, #32]
 80031b6:	4b58      	ldr	r3, [pc, #352]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	4a57      	ldr	r2, [pc, #348]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	f023 0304 	bic.w	r3, r3, #4
 80031c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d015      	beq.n	80031f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ca:	f7fe feab 	bl	8001f24 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d0:	e00a      	b.n	80031e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f7fe fea7 	bl	8001f24 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e0b1      	b.n	800334c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e8:	4b4b      	ldr	r3, [pc, #300]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0ee      	beq.n	80031d2 <HAL_RCC_OscConfig+0x37e>
 80031f4:	e014      	b.n	8003220 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f6:	f7fe fe95 	bl	8001f24 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fc:	e00a      	b.n	8003214 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fe:	f7fe fe91 	bl	8001f24 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	f241 3288 	movw	r2, #5000	; 0x1388
 800320c:	4293      	cmp	r3, r2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e09b      	b.n	800334c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003214:	4b40      	ldr	r3, [pc, #256]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1ee      	bne.n	80031fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003220:	7dfb      	ldrb	r3, [r7, #23]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d105      	bne.n	8003232 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003226:	4b3c      	ldr	r3, [pc, #240]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	4a3b      	ldr	r2, [pc, #236]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003230:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8087 	beq.w	800334a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800323c:	4b36      	ldr	r3, [pc, #216]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b08      	cmp	r3, #8
 8003246:	d061      	beq.n	800330c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d146      	bne.n	80032de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003250:	4b33      	ldr	r3, [pc, #204]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003256:	f7fe fe65 	bl	8001f24 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325e:	f7fe fe61 	bl	8001f24 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e06d      	b.n	800334c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003270:	4b29      	ldr	r3, [pc, #164]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f0      	bne.n	800325e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003284:	d108      	bne.n	8003298 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003286:	4b24      	ldr	r3, [pc, #144]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	4921      	ldr	r1, [pc, #132]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 8003294:	4313      	orrs	r3, r2
 8003296:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003298:	4b1f      	ldr	r3, [pc, #124]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a19      	ldr	r1, [r3, #32]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	430b      	orrs	r3, r1
 80032aa:	491b      	ldr	r1, [pc, #108]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b0:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7fe fe35 	bl	8001f24 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032be:	f7fe fe31 	bl	8001f24 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e03d      	b.n	800334c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032d0:	4b11      	ldr	r3, [pc, #68]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x46a>
 80032dc:	e035      	b.n	800334a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fe fe1e 	bl	8001f24 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fe fe1a 	bl	8001f24 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e026      	b.n	800334c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <HAL_RCC_OscConfig+0x4c4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x498>
 800330a:	e01e      	b.n	800334a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d107      	bne.n	8003324 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e019      	b.n	800334c <HAL_RCC_OscConfig+0x4f8>
 8003318:	40021000 	.word	0x40021000
 800331c:	40007000 	.word	0x40007000
 8003320:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCC_OscConfig+0x500>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	429a      	cmp	r2, r3
 8003336:	d106      	bne.n	8003346 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	429a      	cmp	r2, r3
 8003344:	d001      	beq.n	800334a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40021000 	.word	0x40021000

08003358 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0d0      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800336c:	4b6a      	ldr	r3, [pc, #424]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d910      	bls.n	800339c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b67      	ldr	r3, [pc, #412]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 0207 	bic.w	r2, r3, #7
 8003382:	4965      	ldr	r1, [pc, #404]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b63      	ldr	r3, [pc, #396]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0b8      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d020      	beq.n	80033ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b4:	4b59      	ldr	r3, [pc, #356]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	4a58      	ldr	r2, [pc, #352]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80033ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033cc:	4b53      	ldr	r3, [pc, #332]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	4a52      	ldr	r2, [pc, #328]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d8:	4b50      	ldr	r3, [pc, #320]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	494d      	ldr	r1, [pc, #308]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d040      	beq.n	8003478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b47      	ldr	r3, [pc, #284]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d115      	bne.n	8003436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e07f      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d107      	bne.n	8003426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003416:	4b41      	ldr	r3, [pc, #260]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d109      	bne.n	8003436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e073      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003426:	4b3d      	ldr	r3, [pc, #244]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e06b      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003436:	4b39      	ldr	r3, [pc, #228]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f023 0203 	bic.w	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4936      	ldr	r1, [pc, #216]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003448:	f7fe fd6c 	bl	8001f24 <HAL_GetTick>
 800344c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344e:	e00a      	b.n	8003466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003450:	f7fe fd68 	bl	8001f24 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f241 3288 	movw	r2, #5000	; 0x1388
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e053      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003466:	4b2d      	ldr	r3, [pc, #180]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 020c 	and.w	r2, r3, #12
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	429a      	cmp	r2, r3
 8003476:	d1eb      	bne.n	8003450 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003478:	4b27      	ldr	r3, [pc, #156]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d210      	bcs.n	80034a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003486:	4b24      	ldr	r3, [pc, #144]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 0207 	bic.w	r2, r3, #7
 800348e:	4922      	ldr	r1, [pc, #136]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	4313      	orrs	r3, r2
 8003494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003496:	4b20      	ldr	r3, [pc, #128]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e032      	b.n	800350e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4916      	ldr	r1, [pc, #88]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034d2:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	490e      	ldr	r1, [pc, #56]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034e6:	f000 f821 	bl	800352c <HAL_RCC_GetSysClockFreq>
 80034ea:	4602      	mov	r2, r0
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_ClockConfig+0x1c4>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	490a      	ldr	r1, [pc, #40]	; (8003520 <HAL_RCC_ClockConfig+0x1c8>)
 80034f8:	5ccb      	ldrb	r3, [r1, r3]
 80034fa:	fa22 f303 	lsr.w	r3, r2, r3
 80034fe:	4a09      	ldr	r2, [pc, #36]	; (8003524 <HAL_RCC_ClockConfig+0x1cc>)
 8003500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003502:	4b09      	ldr	r3, [pc, #36]	; (8003528 <HAL_RCC_ClockConfig+0x1d0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe fcca 	bl	8001ea0 <HAL_InitTick>

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40022000 	.word	0x40022000
 800351c:	40021000 	.word	0x40021000
 8003520:	08004894 	.word	0x08004894
 8003524:	2000000c 	.word	0x2000000c
 8003528:	20000010 	.word	0x20000010

0800352c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	2300      	movs	r3, #0
 8003540:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003546:	4b1e      	ldr	r3, [pc, #120]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b04      	cmp	r3, #4
 8003554:	d002      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0x30>
 8003556:	2b08      	cmp	r3, #8
 8003558:	d003      	beq.n	8003562 <HAL_RCC_GetSysClockFreq+0x36>
 800355a:	e027      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800355c:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800355e:	613b      	str	r3, [r7, #16]
      break;
 8003560:	e027      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	0c9b      	lsrs	r3, r3, #18
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	4a17      	ldr	r2, [pc, #92]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800356c:	5cd3      	ldrb	r3, [r2, r3]
 800356e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d010      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800357a:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	0c5b      	lsrs	r3, r3, #17
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	4a11      	ldr	r2, [pc, #68]	; (80035cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003586:	5cd3      	ldrb	r3, [r2, r3]
 8003588:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a0d      	ldr	r2, [pc, #52]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800358e:	fb03 f202 	mul.w	r2, r3, r2
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	e004      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a0c      	ldr	r2, [pc, #48]	; (80035d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035a0:	fb02 f303 	mul.w	r3, r2, r3
 80035a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	613b      	str	r3, [r7, #16]
      break;
 80035aa:	e002      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ae:	613b      	str	r3, [r7, #16]
      break;
 80035b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b2:	693b      	ldr	r3, [r7, #16]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	371c      	adds	r7, #28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40021000 	.word	0x40021000
 80035c4:	007a1200 	.word	0x007a1200
 80035c8:	080048ac 	.word	0x080048ac
 80035cc:	080048bc 	.word	0x080048bc
 80035d0:	003d0900 	.word	0x003d0900

080035d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d8:	4b02      	ldr	r3, [pc, #8]	; (80035e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80035da:	681b      	ldr	r3, [r3, #0]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	2000000c 	.word	0x2000000c

080035e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035ec:	f7ff fff2 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	0a1b      	lsrs	r3, r3, #8
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	4903      	ldr	r1, [pc, #12]	; (800360c <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40021000 	.word	0x40021000
 800360c:	080048a4 	.word	0x080048a4

08003610 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003618:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <RCC_Delay+0x34>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a0a      	ldr	r2, [pc, #40]	; (8003648 <RCC_Delay+0x38>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	0a5b      	lsrs	r3, r3, #9
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800362c:	bf00      	nop
  }
  while (Delay --);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1e5a      	subs	r2, r3, #1
 8003632:	60fa      	str	r2, [r7, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f9      	bne.n	800362c <RCC_Delay+0x1c>
}
 8003638:	bf00      	nop
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr
 8003644:	2000000c 	.word	0x2000000c
 8003648:	10624dd3 	.word	0x10624dd3

0800364c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e076      	b.n	800374c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	2b00      	cmp	r3, #0
 8003664:	d108      	bne.n	8003678 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800366e:	d009      	beq.n	8003684 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	61da      	str	r2, [r3, #28]
 8003676:	e005      	b.n	8003684 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7fe fae8 	bl	8001c74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003708:	ea42 0103 	orr.w	r1, r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003710:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	0c1a      	lsrs	r2, r3, #16
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f002 0204 	and.w	r2, r2, #4
 800372a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800373a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08c      	sub	sp, #48	; 0x30
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003762:	2301      	movs	r3, #1
 8003764:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_SPI_TransmitReceive+0x26>
 8003776:	2302      	movs	r3, #2
 8003778:	e198      	b.n	8003aac <HAL_SPI_TransmitReceive+0x358>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003782:	f7fe fbcf 	bl	8001f24 <HAL_GetTick>
 8003786:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800378e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003798:	887b      	ldrh	r3, [r7, #2]
 800379a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800379c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d00f      	beq.n	80037c4 <HAL_SPI_TransmitReceive+0x70>
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037aa:	d107      	bne.n	80037bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d103      	bne.n	80037bc <HAL_SPI_TransmitReceive+0x68>
 80037b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d003      	beq.n	80037c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80037bc:	2302      	movs	r3, #2
 80037be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037c2:	e16d      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_SPI_TransmitReceive+0x82>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <HAL_SPI_TransmitReceive+0x82>
 80037d0:	887b      	ldrh	r3, [r7, #2]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d103      	bne.n	80037de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037dc:	e160      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d003      	beq.n	80037f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2205      	movs	r2, #5
 80037ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	887a      	ldrh	r2, [r7, #2]
 8003802:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	887a      	ldrh	r2, [r7, #2]
 8003808:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	887a      	ldrh	r2, [r7, #2]
 8003814:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	887a      	ldrh	r2, [r7, #2]
 800381a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003832:	2b40      	cmp	r3, #64	; 0x40
 8003834:	d007      	beq.n	8003846 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003844:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800384e:	d17c      	bne.n	800394a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_SPI_TransmitReceive+0x10a>
 8003858:	8b7b      	ldrh	r3, [r7, #26]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d16a      	bne.n	8003934 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	881a      	ldrh	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	1c9a      	adds	r2, r3, #2
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003882:	e057      	b.n	8003934 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b02      	cmp	r3, #2
 8003890:	d11b      	bne.n	80038ca <HAL_SPI_TransmitReceive+0x176>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d016      	beq.n	80038ca <HAL_SPI_TransmitReceive+0x176>
 800389c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d113      	bne.n	80038ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	881a      	ldrh	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	1c9a      	adds	r2, r3, #2
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d119      	bne.n	800390c <HAL_SPI_TransmitReceive+0x1b8>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d014      	beq.n	800390c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	b292      	uxth	r2, r2
 80038ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f4:	1c9a      	adds	r2, r3, #2
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003908:	2301      	movs	r3, #1
 800390a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800390c:	f7fe fb0a 	bl	8001f24 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003918:	429a      	cmp	r2, r3
 800391a:	d80b      	bhi.n	8003934 <HAL_SPI_TransmitReceive+0x1e0>
 800391c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003922:	d007      	beq.n	8003934 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003932:	e0b5      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1a2      	bne.n	8003884 <HAL_SPI_TransmitReceive+0x130>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d19d      	bne.n	8003884 <HAL_SPI_TransmitReceive+0x130>
 8003948:	e080      	b.n	8003a4c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <HAL_SPI_TransmitReceive+0x204>
 8003952:	8b7b      	ldrh	r3, [r7, #26]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d16f      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	330c      	adds	r3, #12
 8003962:	7812      	ldrb	r2, [r2, #0]
 8003964:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800397e:	e05b      	b.n	8003a38 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b02      	cmp	r3, #2
 800398c:	d11c      	bne.n	80039c8 <HAL_SPI_TransmitReceive+0x274>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d017      	beq.n	80039c8 <HAL_SPI_TransmitReceive+0x274>
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	2b01      	cmp	r3, #1
 800399c:	d114      	bne.n	80039c8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	330c      	adds	r3, #12
 80039a8:	7812      	ldrb	r2, [r2, #0]
 80039aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d119      	bne.n	8003a0a <HAL_SPI_TransmitReceive+0x2b6>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d014      	beq.n	8003a0a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a06:	2301      	movs	r3, #1
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a0a:	f7fe fa8b 	bl	8001f24 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d803      	bhi.n	8003a22 <HAL_SPI_TransmitReceive+0x2ce>
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d102      	bne.n	8003a28 <HAL_SPI_TransmitReceive+0x2d4>
 8003a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d107      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003a36:	e033      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d19e      	bne.n	8003980 <HAL_SPI_TransmitReceive+0x22c>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d199      	bne.n	8003980 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f8b7 	bl	8003bc4 <SPI_EndRxTxTransaction>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d006      	beq.n	8003a6a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a68:	e01a      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10a      	bne.n	8003a88 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a96:	e003      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003aa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3730      	adds	r7, #48	; 0x30
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ac4:	f7fe fa2e 	bl	8001f24 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ad4:	f7fe fa26 	bl	8001f24 <HAL_GetTick>
 8003ad8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ada:	4b39      	ldr	r3, [pc, #228]	; (8003bc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	015b      	lsls	r3, r3, #5
 8003ae0:	0d1b      	lsrs	r3, r3, #20
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	fb02 f303 	mul.w	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aea:	e054      	b.n	8003b96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af2:	d050      	beq.n	8003b96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003af4:	f7fe fa16 	bl	8001f24 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d902      	bls.n	8003b0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d13d      	bne.n	8003b86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b22:	d111      	bne.n	8003b48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b2c:	d004      	beq.n	8003b38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b36:	d107      	bne.n	8003b48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b50:	d10f      	bne.n	8003b72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e017      	b.n	8003bb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	bf0c      	ite	eq
 8003ba6:	2301      	moveq	r3, #1
 8003ba8:	2300      	movne	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d19b      	bne.n	8003aec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3720      	adds	r7, #32
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	2000000c 	.word	0x2000000c

08003bc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af02      	add	r7, sp, #8
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2180      	movs	r1, #128	; 0x80
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f7ff ff6a 	bl	8003ab4 <SPI_WaitFlagStateUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d007      	beq.n	8003bf6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bea:	f043 0220 	orr.w	r2, r3, #32
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e000      	b.n	8003bf8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e041      	b.n	8003c96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fe f86e 	bl	8001d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	f000 fab2 	bl	80041a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b082      	sub	sp, #8
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e041      	b.n	8003d34 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d106      	bne.n	8003cca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f839 	bl	8003d3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4610      	mov	r0, r2
 8003cde:	f000 fa63 	bl	80041a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr
	...

08003d50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d109      	bne.n	8003d74 <HAL_TIM_PWM_Start+0x24>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	bf14      	ite	ne
 8003d6c:	2301      	movne	r3, #1
 8003d6e:	2300      	moveq	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	e022      	b.n	8003dba <HAL_TIM_PWM_Start+0x6a>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d109      	bne.n	8003d8e <HAL_TIM_PWM_Start+0x3e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	bf14      	ite	ne
 8003d86:	2301      	movne	r3, #1
 8003d88:	2300      	moveq	r3, #0
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	e015      	b.n	8003dba <HAL_TIM_PWM_Start+0x6a>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d109      	bne.n	8003da8 <HAL_TIM_PWM_Start+0x58>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	bf14      	ite	ne
 8003da0:	2301      	movne	r3, #1
 8003da2:	2300      	moveq	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	e008      	b.n	8003dba <HAL_TIM_PWM_Start+0x6a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	bf14      	ite	ne
 8003db4:	2301      	movne	r3, #1
 8003db6:	2300      	moveq	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e05e      	b.n	8003e80 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d104      	bne.n	8003dd2 <HAL_TIM_PWM_Start+0x82>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd0:	e013      	b.n	8003dfa <HAL_TIM_PWM_Start+0xaa>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d104      	bne.n	8003de2 <HAL_TIM_PWM_Start+0x92>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de0:	e00b      	b.n	8003dfa <HAL_TIM_PWM_Start+0xaa>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d104      	bne.n	8003df2 <HAL_TIM_PWM_Start+0xa2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df0:	e003      	b.n	8003dfa <HAL_TIM_PWM_Start+0xaa>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2202      	movs	r2, #2
 8003df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	6839      	ldr	r1, [r7, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fc50 	bl	80046a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1e      	ldr	r2, [pc, #120]	; (8003e88 <HAL_TIM_PWM_Start+0x138>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d107      	bne.n	8003e22 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a18      	ldr	r2, [pc, #96]	; (8003e88 <HAL_TIM_PWM_Start+0x138>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00e      	beq.n	8003e4a <HAL_TIM_PWM_Start+0xfa>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e34:	d009      	beq.n	8003e4a <HAL_TIM_PWM_Start+0xfa>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a14      	ldr	r2, [pc, #80]	; (8003e8c <HAL_TIM_PWM_Start+0x13c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d004      	beq.n	8003e4a <HAL_TIM_PWM_Start+0xfa>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a12      	ldr	r2, [pc, #72]	; (8003e90 <HAL_TIM_PWM_Start+0x140>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d111      	bne.n	8003e6e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b06      	cmp	r3, #6
 8003e5a:	d010      	beq.n	8003e7e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6c:	e007      	b.n	8003e7e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0201 	orr.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40000800 	.word	0x40000800

08003e94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e0ae      	b.n	8004010 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b0c      	cmp	r3, #12
 8003ebe:	f200 809f 	bhi.w	8004000 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ec2:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec8:	08003efd 	.word	0x08003efd
 8003ecc:	08004001 	.word	0x08004001
 8003ed0:	08004001 	.word	0x08004001
 8003ed4:	08004001 	.word	0x08004001
 8003ed8:	08003f3d 	.word	0x08003f3d
 8003edc:	08004001 	.word	0x08004001
 8003ee0:	08004001 	.word	0x08004001
 8003ee4:	08004001 	.word	0x08004001
 8003ee8:	08003f7f 	.word	0x08003f7f
 8003eec:	08004001 	.word	0x08004001
 8003ef0:	08004001 	.word	0x08004001
 8003ef4:	08004001 	.word	0x08004001
 8003ef8:	08003fbf 	.word	0x08003fbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 f9b2 	bl	800426c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0208 	orr.w	r2, r2, #8
 8003f16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0204 	bic.w	r2, r2, #4
 8003f26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6999      	ldr	r1, [r3, #24]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	619a      	str	r2, [r3, #24]
      break;
 8003f3a:	e064      	b.n	8004006 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 f9f8 	bl	8004338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699a      	ldr	r2, [r3, #24]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6999      	ldr	r1, [r3, #24]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	021a      	lsls	r2, r3, #8
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	619a      	str	r2, [r3, #24]
      break;
 8003f7c:	e043      	b.n	8004006 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fa41 	bl	800440c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69da      	ldr	r2, [r3, #28]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0208 	orr.w	r2, r2, #8
 8003f98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0204 	bic.w	r2, r2, #4
 8003fa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69d9      	ldr	r1, [r3, #28]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	61da      	str	r2, [r3, #28]
      break;
 8003fbc:	e023      	b.n	8004006 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 fa8b 	bl	80044e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69da      	ldr	r2, [r3, #28]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69da      	ldr	r2, [r3, #28]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69d9      	ldr	r1, [r3, #28]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	021a      	lsls	r2, r3, #8
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	61da      	str	r2, [r3, #28]
      break;
 8003ffe:	e002      	b.n	8004006 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	75fb      	strb	r3, [r7, #23]
      break;
 8004004:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800400e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_TIM_ConfigClockSource+0x1c>
 8004030:	2302      	movs	r3, #2
 8004032:	e0b4      	b.n	800419e <HAL_TIM_ConfigClockSource+0x186>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800405a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800406c:	d03e      	beq.n	80040ec <HAL_TIM_ConfigClockSource+0xd4>
 800406e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004072:	f200 8087 	bhi.w	8004184 <HAL_TIM_ConfigClockSource+0x16c>
 8004076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407a:	f000 8086 	beq.w	800418a <HAL_TIM_ConfigClockSource+0x172>
 800407e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004082:	d87f      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x16c>
 8004084:	2b70      	cmp	r3, #112	; 0x70
 8004086:	d01a      	beq.n	80040be <HAL_TIM_ConfigClockSource+0xa6>
 8004088:	2b70      	cmp	r3, #112	; 0x70
 800408a:	d87b      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x16c>
 800408c:	2b60      	cmp	r3, #96	; 0x60
 800408e:	d050      	beq.n	8004132 <HAL_TIM_ConfigClockSource+0x11a>
 8004090:	2b60      	cmp	r3, #96	; 0x60
 8004092:	d877      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x16c>
 8004094:	2b50      	cmp	r3, #80	; 0x50
 8004096:	d03c      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0xfa>
 8004098:	2b50      	cmp	r3, #80	; 0x50
 800409a:	d873      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x16c>
 800409c:	2b40      	cmp	r3, #64	; 0x40
 800409e:	d058      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0x13a>
 80040a0:	2b40      	cmp	r3, #64	; 0x40
 80040a2:	d86f      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x16c>
 80040a4:	2b30      	cmp	r3, #48	; 0x30
 80040a6:	d064      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0x15a>
 80040a8:	2b30      	cmp	r3, #48	; 0x30
 80040aa:	d86b      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x16c>
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d060      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0x15a>
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d867      	bhi.n	8004184 <HAL_TIM_ConfigClockSource+0x16c>
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d05c      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0x15a>
 80040b8:	2b10      	cmp	r3, #16
 80040ba:	d05a      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0x15a>
 80040bc:	e062      	b.n	8004184 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040ce:	f000 facc 	bl	800466a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	609a      	str	r2, [r3, #8]
      break;
 80040ea:	e04f      	b.n	800418c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040fc:	f000 fab5 	bl	800466a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800410e:	609a      	str	r2, [r3, #8]
      break;
 8004110:	e03c      	b.n	800418c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800411e:	461a      	mov	r2, r3
 8004120:	f000 fa2c 	bl	800457c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2150      	movs	r1, #80	; 0x50
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fa83 	bl	8004636 <TIM_ITRx_SetConfig>
      break;
 8004130:	e02c      	b.n	800418c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800413e:	461a      	mov	r2, r3
 8004140:	f000 fa4a 	bl	80045d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2160      	movs	r1, #96	; 0x60
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fa73 	bl	8004636 <TIM_ITRx_SetConfig>
      break;
 8004150:	e01c      	b.n	800418c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800415e:	461a      	mov	r2, r3
 8004160:	f000 fa0c 	bl	800457c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2140      	movs	r1, #64	; 0x40
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fa63 	bl	8004636 <TIM_ITRx_SetConfig>
      break;
 8004170:	e00c      	b.n	800418c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4619      	mov	r1, r3
 800417c:	4610      	mov	r0, r2
 800417e:	f000 fa5a 	bl	8004636 <TIM_ITRx_SetConfig>
      break;
 8004182:	e003      	b.n	800418c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	73fb      	strb	r3, [r7, #15]
      break;
 8004188:	e000      	b.n	800418c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800418a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800419c:	7bfb      	ldrb	r3, [r7, #15]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a29      	ldr	r2, [pc, #164]	; (8004260 <TIM_Base_SetConfig+0xb8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00b      	beq.n	80041d8 <TIM_Base_SetConfig+0x30>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c6:	d007      	beq.n	80041d8 <TIM_Base_SetConfig+0x30>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a26      	ldr	r2, [pc, #152]	; (8004264 <TIM_Base_SetConfig+0xbc>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d003      	beq.n	80041d8 <TIM_Base_SetConfig+0x30>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a25      	ldr	r2, [pc, #148]	; (8004268 <TIM_Base_SetConfig+0xc0>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d108      	bne.n	80041ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a1c      	ldr	r2, [pc, #112]	; (8004260 <TIM_Base_SetConfig+0xb8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00b      	beq.n	800420a <TIM_Base_SetConfig+0x62>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f8:	d007      	beq.n	800420a <TIM_Base_SetConfig+0x62>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a19      	ldr	r2, [pc, #100]	; (8004264 <TIM_Base_SetConfig+0xbc>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d003      	beq.n	800420a <TIM_Base_SetConfig+0x62>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a18      	ldr	r2, [pc, #96]	; (8004268 <TIM_Base_SetConfig+0xc0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d108      	bne.n	800421c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a07      	ldr	r2, [pc, #28]	; (8004260 <TIM_Base_SetConfig+0xb8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d103      	bne.n	8004250 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	615a      	str	r2, [r3, #20]
}
 8004256:	bf00      	nop
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr
 8004260:	40012c00 	.word	0x40012c00
 8004264:	40000400 	.word	0x40000400
 8004268:	40000800 	.word	0x40000800

0800426c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	f023 0201 	bic.w	r2, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0303 	bic.w	r3, r3, #3
 80042a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f023 0302 	bic.w	r3, r3, #2
 80042b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4313      	orrs	r3, r2
 80042be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <TIM_OC1_SetConfig+0xc8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d10c      	bne.n	80042e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f023 0308 	bic.w	r3, r3, #8
 80042ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f023 0304 	bic.w	r3, r3, #4
 80042e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a13      	ldr	r2, [pc, #76]	; (8004334 <TIM_OC1_SetConfig+0xc8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d111      	bne.n	800430e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	621a      	str	r2, [r3, #32]
}
 8004328:	bf00      	nop
 800432a:	371c      	adds	r7, #28
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40012c00 	.word	0x40012c00

08004338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	f023 0210 	bic.w	r2, r3, #16
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800436e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	021b      	lsls	r3, r3, #8
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4313      	orrs	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f023 0320 	bic.w	r3, r3, #32
 8004382:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a1d      	ldr	r2, [pc, #116]	; (8004408 <TIM_OC2_SetConfig+0xd0>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d10d      	bne.n	80043b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800439e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a14      	ldr	r2, [pc, #80]	; (8004408 <TIM_OC2_SetConfig+0xd0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d113      	bne.n	80043e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr
 8004408:	40012c00 	.word	0x40012c00

0800440c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0303 	bic.w	r3, r3, #3
 8004442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a1d      	ldr	r2, [pc, #116]	; (80044dc <TIM_OC3_SetConfig+0xd0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d10d      	bne.n	8004486 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004470:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a14      	ldr	r2, [pc, #80]	; (80044dc <TIM_OC3_SetConfig+0xd0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d113      	bne.n	80044b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800449c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	621a      	str	r2, [r3, #32]
}
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40012c00 	.word	0x40012c00

080044e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4313      	orrs	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800452a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	031b      	lsls	r3, r3, #12
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a0f      	ldr	r2, [pc, #60]	; (8004578 <TIM_OC4_SetConfig+0x98>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d109      	bne.n	8004554 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	019b      	lsls	r3, r3, #6
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	621a      	str	r2, [r3, #32]
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr
 8004578:	40012c00 	.word	0x40012c00

0800457c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800457c:	b480      	push	{r7}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	f023 0201 	bic.w	r2, r3, #1
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f023 030a 	bic.w	r3, r3, #10
 80045b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	621a      	str	r2, [r3, #32]
}
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr

080045d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f023 0210 	bic.w	r2, r3, #16
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	031b      	lsls	r3, r3, #12
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004614:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	621a      	str	r2, [r3, #32]
}
 800462c:	bf00      	nop
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr

08004636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004636:	b480      	push	{r7}
 8004638:	b085      	sub	sp, #20
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	f043 0307 	orr.w	r3, r3, #7
 8004658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	609a      	str	r2, [r3, #8]
}
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr

0800466a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800466a:	b480      	push	{r7}
 800466c:	b087      	sub	sp, #28
 800466e:	af00      	add	r7, sp, #0
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	607a      	str	r2, [r7, #4]
 8004676:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004684:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	021a      	lsls	r2, r3, #8
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	431a      	orrs	r2, r3
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	4313      	orrs	r3, r2
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	609a      	str	r2, [r3, #8]
}
 800469e:	bf00      	nop
 80046a0:	371c      	adds	r7, #28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr

080046a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f003 031f 	and.w	r3, r3, #31
 80046ba:	2201      	movs	r2, #1
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a1a      	ldr	r2, [r3, #32]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	43db      	mvns	r3, r3
 80046ca:	401a      	ands	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a1a      	ldr	r2, [r3, #32]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f003 031f 	and.w	r3, r3, #31
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	fa01 f303 	lsl.w	r3, r1, r3
 80046e0:	431a      	orrs	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	621a      	str	r2, [r3, #32]
}
 80046e6:	bf00      	nop
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr

080046f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004704:	2302      	movs	r3, #2
 8004706:	e046      	b.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a16      	ldr	r2, [pc, #88]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00e      	beq.n	800476a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004754:	d009      	beq.n	800476a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a12      	ldr	r2, [pc, #72]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d004      	beq.n	800476a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a10      	ldr	r2, [pc, #64]	; (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d10c      	bne.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004770:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	4313      	orrs	r3, r2
 800477a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr
 80047a0:	40012c00 	.word	0x40012c00
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40000800 	.word	0x40000800

080047ac <memset>:
 80047ac:	4603      	mov	r3, r0
 80047ae:	4402      	add	r2, r0
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d100      	bne.n	80047b6 <memset+0xa>
 80047b4:	4770      	bx	lr
 80047b6:	f803 1b01 	strb.w	r1, [r3], #1
 80047ba:	e7f9      	b.n	80047b0 <memset+0x4>

080047bc <__libc_init_array>:
 80047bc:	b570      	push	{r4, r5, r6, lr}
 80047be:	2600      	movs	r6, #0
 80047c0:	4d0c      	ldr	r5, [pc, #48]	; (80047f4 <__libc_init_array+0x38>)
 80047c2:	4c0d      	ldr	r4, [pc, #52]	; (80047f8 <__libc_init_array+0x3c>)
 80047c4:	1b64      	subs	r4, r4, r5
 80047c6:	10a4      	asrs	r4, r4, #2
 80047c8:	42a6      	cmp	r6, r4
 80047ca:	d109      	bne.n	80047e0 <__libc_init_array+0x24>
 80047cc:	f000 f81a 	bl	8004804 <_init>
 80047d0:	2600      	movs	r6, #0
 80047d2:	4d0a      	ldr	r5, [pc, #40]	; (80047fc <__libc_init_array+0x40>)
 80047d4:	4c0a      	ldr	r4, [pc, #40]	; (8004800 <__libc_init_array+0x44>)
 80047d6:	1b64      	subs	r4, r4, r5
 80047d8:	10a4      	asrs	r4, r4, #2
 80047da:	42a6      	cmp	r6, r4
 80047dc:	d105      	bne.n	80047ea <__libc_init_array+0x2e>
 80047de:	bd70      	pop	{r4, r5, r6, pc}
 80047e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e4:	4798      	blx	r3
 80047e6:	3601      	adds	r6, #1
 80047e8:	e7ee      	b.n	80047c8 <__libc_init_array+0xc>
 80047ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ee:	4798      	blx	r3
 80047f0:	3601      	adds	r6, #1
 80047f2:	e7f2      	b.n	80047da <__libc_init_array+0x1e>
 80047f4:	080048c0 	.word	0x080048c0
 80047f8:	080048c0 	.word	0x080048c0
 80047fc:	080048c0 	.word	0x080048c0
 8004800:	080048c4 	.word	0x080048c4

08004804 <_init>:
 8004804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004806:	bf00      	nop
 8004808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480a:	bc08      	pop	{r3}
 800480c:	469e      	mov	lr, r3
 800480e:	4770      	bx	lr

08004810 <_fini>:
 8004810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004812:	bf00      	nop
 8004814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004816:	bc08      	pop	{r3}
 8004818:	469e      	mov	lr, r3
 800481a:	4770      	bx	lr
